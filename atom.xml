<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I am cmp-cc</title>
  <subtitle>一直在打杂，从未被超越。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cmp-cc.github.io/"/>
  <updated>2016-04-13T09:00:16.390Z</updated>
  <id>http://cmp-cc.github.io/</id>
  
  <author>
    <name>cmp-cc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>H2 DataBase 数据库</title>
    <link href="http://cmp-cc.github.io/2016/04/12/H2%20DataBase%20%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://cmp-cc.github.io/2016/04/12/H2 DataBase 数据库/</id>
    <published>2016-04-12T09:49:00.000Z</published>
    <updated>2016-04-13T09:00:16.390Z</updated>
    
    <content type="html">&lt;p&gt;H2 DataBase属于Java 嵌入式数据库（内存数据库），除此之外还有HyperSQL Database、 Apache Derby。&lt;/p&gt;
&lt;p&gt;H2 貌似用的人更多一些，这篇文章只是介绍 H2 Web开发实例。&lt;/p&gt;
&lt;p&gt;H2 生产环境几乎没有人用，他不适用高并发和大数据，并发越大插入和读取性能越低。&lt;/p&gt;
&lt;p&gt;H2 应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小型内部系统&lt;/li&gt;
&lt;li&gt;数据缓存&lt;/li&gt;
&lt;li&gt;监控系统&lt;/li&gt;
&lt;li&gt;测试环境（如：开启MySql模式）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;以上都是我YY的，没有实战，可信度30%&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;H2-DataBase-数据库&quot;&gt;&lt;a href=&quot;#H2-DataBase-数据库&quot; class=&quot;headerlink&quot; title=&quot;H2 DataBase 数据库&quot;&gt;&lt;/a&gt;H2 DataBase 数据库&lt;/h2&gt;&lt;h3 id=&quot;Maven-引入H2依赖&quot;&gt;&lt;a href=&quot;#Maven-引入H2依赖&quot; class=&quot;headerlink&quot; title=&quot;Maven 引入H2依赖&quot;&gt;&lt;/a&gt;Maven 引入H2依赖&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;com.h2database&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;h2&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;version&amp;gt;1.4.191&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;H2-实例&quot;&gt;&lt;a href=&quot;#H2-实例&quot; class=&quot;headerlink&quot; title=&quot;H2 实例&quot;&gt;&lt;/a&gt;H2 实例&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;部分实例参考官网&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;JDBC-连接&quot;&gt;&lt;a href=&quot;#JDBC-连接&quot; class=&quot;headerlink&quot; title=&quot;JDBC 连接&quot;&gt;&lt;/a&gt;JDBC 连接&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;获取JDBC 连接&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private static String driver = &amp;quot;org.h2.Driver&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private static String url = &amp;quot;jdbc:h2:./h2db&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private static String username = &amp;quot;root&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private static String password = &amp;quot;123456&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static Connection getConnection() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Class.forName(driver);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 可以不用设置户名和密码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Connection connection = DriverManager.getConnection(url, username, password);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return connection;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; catch (SQLException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; catch (ClassNotFoundException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // TODO Auto-generated catch block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取JDBC连接池&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private static final String url = &amp;quot;jdbc:h2:./h2db&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private static final String username = &amp;quot;root&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private static final String password = &amp;quot;123456&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private static JdbcConnectionPool pool = JdbcConnectionPool.create(url,username,password);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pool.setLoginTimeout(1000); // 连接超时时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pool.setMaxConnections(50); // 最大连接数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @return 获取H2 JDBC连接池&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static JdbcConnectionPool getJDBCConnectionPool()&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return pool;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static Connection getConnection()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return pool.getConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; catch (SQLException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // TODO Auto-generated catch block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;finally&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 释放空闲连接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pool.dispose(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;jdbc:h2:./h2db 中h2db表示数据库名称,它会在当前路径中创建h2db.mv.db文件，用于记录数据库数据信息。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;有了Connection（JDBC链接）我相信你已经无敌了。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;H2-工具&quot;&gt;&lt;a href=&quot;#H2-工具&quot; class=&quot;headerlink&quot; title=&quot;H2 工具&quot;&gt;&lt;/a&gt;H2 工具&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;H2 与众不同的一点（奇葩）的一点，它提供了一些工具操作&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;读写CVS&quot;&gt;&lt;a href=&quot;#读写CVS&quot; class=&quot;headerlink&quot; title=&quot;读写CVS&quot;&gt;&lt;/a&gt;读写CVS&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Write a CSV file.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void write() throws SQLException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SimpleResultSet rs = new SimpleResultSet();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rs.addColumn(&amp;quot;NAME&amp;quot;, Types.VARCHAR, 255, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rs.addColumn(&amp;quot;EMAIL&amp;quot;, Types.VARCHAR, 255, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rs.addColumn(&amp;quot;PHONE&amp;quot;, Types.VARCHAR, 255, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rs.addRow(&amp;quot;Bob Meier&amp;quot;, &amp;quot;bob.meier@abcde.abc&amp;quot;, &amp;quot;+41123456789&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rs.addRow(&amp;quot;John Jones&amp;quot;, &amp;quot;john.jones@abcde.abc&amp;quot;, &amp;quot;+41976543210&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    new Csv().write(&amp;quot;data/test.csv&amp;quot;, rs, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Read a CSV file.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void read() throws SQLException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ResultSet rs = new Csv().read(&amp;quot;data/test.csv&amp;quot;, null, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ResultSetMetaData meta = rs.getMetaData();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while (rs.next()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i = 0; i &amp;lt; meta.getColumnCount(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(meta.getColumnLabel(i + 1) + &amp;quot;: &amp;quot; + rs.getString(i + 1));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rs.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;服务和脚本&quot;&gt;&lt;a href=&quot;#服务和脚本&quot; class=&quot;headerlink&quot; title=&quot;服务和脚本&quot;&gt;&lt;/a&gt;服务和脚本&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;暂略吧，没什么应用场景。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;H2-全文检索&quot;&gt;&lt;a href=&quot;#H2-全文检索&quot; class=&quot;headerlink&quot; title=&quot;H2 全文检索&quot;&gt;&lt;/a&gt;H2 全文检索&lt;/h3&gt;&lt;p&gt;H2 的全文检索主要使用FullText和FullTextLucene类，使用相对简单，主要使用Search() 和 SearchData()方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用H2 主要还是使用SQL操作，其他的特性也很少用。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;H2 DataBase属于Java 嵌入式数据库（内存数据库），除此之外还有HyperSQL Database、 Apache Derby。&lt;/p&gt;
&lt;p&gt;H2 貌似用的人更多一些，这篇文章只是介绍 H2 Web开发实例。&lt;/p&gt;
&lt;p&gt;H2 生产环境几乎没有人用，他不适用
    
    </summary>
    
      <category term="数据库" scheme="http://cmp-cc.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="嵌入式数据库" scheme="http://cmp-cc.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="H2" scheme="http://cmp-cc.github.io/tags/H2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://cmp-cc.github.io/2015/08/14/hello-world/"/>
    <id>http://cmp-cc.github.io/2015/08/14/hello-world/</id>
    <published>2015-08-14T08:53:00.000Z</published>
    <updated>2016-04-06T08:49:38.964Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="博客" scheme="http://cmp-cc.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Blog" scheme="http://cmp-cc.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://cmp-cc.github.io/tags/Hexo/"/>
    
      <category term="Markdown" scheme="http://cmp-cc.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop 日常实战 文件压缩</title>
    <link href="http://cmp-cc.github.io/2014/12/28/Hadoop%20%E6%97%A5%E5%B8%B8%E5%AE%9E%E6%88%98%20%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/"/>
    <id>http://cmp-cc.github.io/2014/12/28/Hadoop 日常实战 文件压缩/</id>
    <published>2014-12-28T11:25:00.000Z</published>
    <updated>2016-04-09T06:35:52.371Z</updated>
    
    <content type="html">&lt;p&gt;Mapreduce 程序执行可以分为三个阶段：&lt;br&gt;1、Mapper 阶段&lt;br&gt;&lt;strong&gt;从HDFS中读取数据源，将计算结果写入HDFS&lt;/strong&gt;&lt;br&gt;2、Suffle与排序阶段&lt;br&gt;&lt;strong&gt;从HDFS中读取Mapper阶段结果数据，并进行混排操作（Suffle与排序），并将结果数据传递给Reducer&lt;/strong&gt;&lt;br&gt;3、Reducer阶段&lt;br&gt;&lt;strong&gt;Reducer接受数据，再将计算结果写入HDFS或其它&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里我忽略combiner阶段。 因为combiner阶段只是一步优化操作，不属于Mapreduce模型中的核心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如上可知，执行Mapreduce程序一共需要两次文件的读入和写入。  如果增加文件压缩，将大大提高程序的运行效率。&lt;/p&gt;
&lt;h2 id=&quot;Hadoop-支持的压缩算法&quot;&gt;&lt;a href=&quot;#Hadoop-支持的压缩算法&quot; class=&quot;headerlink&quot; title=&quot;Hadoop 支持的压缩算法&quot;&gt;&lt;/a&gt;Hadoop 支持的压缩算法&lt;/h2&gt;&lt;h3 id=&quot;内置压缩算法&quot;&gt;&lt;a href=&quot;#内置压缩算法&quot; class=&quot;headerlink&quot; title=&quot;内置压缩算法&quot;&gt;&lt;/a&gt;内置压缩算法&lt;/h3&gt;&lt;p&gt;优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它减少了存储文件所需的空间；&lt;/li&gt;
&lt;li&gt;加快了数据在网络上或者从磁盘上或到磁盘上的传输速度；&lt;br&gt;hadoop对于压缩格式的是透明识别,我们的MapReduce任务的执行是透明的，hadoop能够自动为我们 将压缩的文件解压，而不用我们去关心。 hadoop就会根据扩展名去选择解码器解压。当压缩文件做为mapreduce的输入时，mapreduce将自动通过扩展名找到相应的codec对其解压。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;主流的压缩格式：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;压缩格式&lt;/th&gt;
&lt;th&gt;工具&lt;/th&gt;
&lt;th&gt;算法&lt;/th&gt;
&lt;th&gt;文件扩展名&lt;/th&gt;
&lt;th&gt;多文件&lt;/th&gt;
&lt;th&gt;是否可切分&lt;/th&gt;
&lt;th&gt;HadoopCompressionCodec&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DEFLATE&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;DEFLATE&lt;/td&gt;
&lt;td&gt;.deflate&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;org.apache.hadoop.io.compress.DefaultCodec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gzip&lt;/td&gt;
&lt;td&gt;gzip&lt;/td&gt;
&lt;td&gt;DEFLATE&lt;/td&gt;
&lt;td&gt;.gz&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;org.apache.hadoop.io.compress.GzipCodec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bzip2&lt;/td&gt;
&lt;td&gt;bzip2&lt;/td&gt;
&lt;td&gt;bzip2&lt;/td&gt;
&lt;td&gt;.bz2&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;org.apache.hadoop.io.compress.BZip2Codec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LZO&lt;/td&gt;
&lt;td&gt;lzop&lt;/td&gt;
&lt;td&gt;LZO&lt;/td&gt;
&lt;td&gt;.lzo&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;是（需要索引）&lt;/td&gt;
&lt;td&gt;com.hadoop.compression.lzo.LzopCodec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Snappy&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Snappy&lt;/td&gt;
&lt;td&gt;.Snappy&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;org.apache.hadoop.io.compress.SnappyCodec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LZ4&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;LZ4&lt;/td&gt;
&lt;td&gt;.lz4&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;org.apache.hadoop.io.compress.Lz4Codec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;压缩算法比较&lt;br&gt;    主要是时间比较与空间比较。&lt;/p&gt;
&lt;p&gt;1）GZIP的压缩率最高，但是其实CPU密集型的，对CPU的消耗比其他算法要多，压缩和解压速度也慢；&lt;br&gt;2）LZO的压缩率居中，比GZIP要低一些，但是压缩和解压速度明显要比GZIP快很多，其中解压速度快的更多；&lt;br&gt;3）Zippy/Snappy的压缩率最低，而压缩和解压速度要稍微比LZO要快一些。&lt;/p&gt;
&lt;h3 id=&quot;LZO-算法引入Hadoop&quot;&gt;&lt;a href=&quot;#LZO-算法引入Hadoop&quot; class=&quot;headerlink&quot; title=&quot;LZO 算法引入Hadoop&quot;&gt;&lt;/a&gt;LZO 算法引入Hadoop&lt;/h3&gt;&lt;p&gt;上述压缩格式类型。 除lzo 格式需要另外下载。MR2 均内置上述格式。&lt;br&gt;Lzo下载地址： &lt;a href=&quot;https://github.com/twitter/hadoop-lzo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/twitter/hadoop-lzo&lt;/a&gt;&lt;br&gt;Lzo 本身不支持切分(splitable) 但是我们可以增加索引，即可支持切分&lt;br&gt;Hadoop的Lzo代码库中有索引工具。（DistributedLzoIndexer）&lt;br&gt;请参照：&lt;br&gt;&lt;a href=&quot;https://github.com/twitter/hadoop-lzo/blob/master/src/test/java/com/hadoop/mapreduce/TestLzoTextInputFormat.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/twitter/hadoop-lzo/blob/master/src/test/java/com/hadoop/mapreduce/TestLzoTextInputFormat.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果希望reduce输出的是lzo格式的文件，添加下面的语句&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FileOutputFormat.setCompressOutput(job, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FileOutputFormat.setOutputCompressorClass(job, LzopCodec.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int result = job.waitForCompletion(true) ? 0 : 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//上面的语句执行完成后，会生成最后的输出文件，需要在此基础上添加lzo的索引&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LzoIndexer lzoIndexer = new LzoIndexer(conf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lzoIndexer.index(new Path(args[1]));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果已经存在lzo文件，但没有添加索引，可以采用下面的方法，在输入路径的文件上上添加lzo索引&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hadoop jar $HADOOP_HOME/lib/hadoop-lzo-0.4.17.jar com.hadoop.compression.lzo.LzoIndexer hdf://inputpath&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;压缩分片的最重要性&quot;&gt;&lt;a href=&quot;#压缩分片的最重要性&quot; class=&quot;headerlink&quot; title=&quot;压缩分片的最重要性&quot;&gt;&lt;/a&gt;压缩分片的最重要性&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;理解分片(splitable)的价值:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持分片是很有用的。&lt;br&gt;&lt;strong&gt;如： 在HDFS上有一个1G的文件。按照HDFS块(block)的设置大小进行文件划分(默认64M)。 那么就会被划分为16个数据块。&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;支持分片：运行这个Mapreduce作业，就会对应16个Map。&lt;/li&gt;
&lt;li&gt;不支持分片：运行这个Mapreduce作业，只能对应1个Map。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为什么？Hadoop又是怎么判断文件是否支持分片？对程序有什么影响？&lt;ul&gt;
&lt;li&gt;1、支持分片，就意味着支持压缩数据流的任意位置读取数据。&lt;/li&gt;
&lt;li&gt;2、Hadoop 则是通过文件后缀名来判断所属的文件是否支持分片。&lt;/li&gt;
&lt;li&gt;3、牺牲数据本地性优势： 1个Map任务要处理16个HDFS块，而且损失了数据本地化优化特性(执行Map任务与HDFS数据位于同一个节点上)。 而且map的任务越少，就意味着执行的时间越长。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;MapReduce-中使用压缩。&quot;&gt;&lt;a href=&quot;#MapReduce-中使用压缩。&quot; class=&quot;headerlink&quot; title=&quot;MapReduce 中使用压缩。&quot;&gt;&lt;/a&gt;MapReduce 中使用压缩。&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;在MapReduce中使用压缩是简单的。 我们通常有两种方式。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;代码方式：&quot;&gt;&lt;a href=&quot;#代码方式：&quot; class=&quot;headerlink&quot; title=&quot;代码方式：&quot;&gt;&lt;/a&gt;代码方式：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Map端输出压缩：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conf.setBoolean(&amp;quot;mapred.compress.map.output&amp;quot;, true);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conf.setClass(&amp;quot;mapred.map.output.compression.codec&amp;quot;,GzipCodec.class, CompressionCodec.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Reduce 端输出压缩&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conf.setBoolean(&amp;quot;mapred.out.compress&amp;quot;,true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conf.setClass(&amp;quot;mapred.output.compression.codec&amp;quot;,SnappyCodec.class,CompressionCodec.class);	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/ /或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FileOutputFormat.setCompressOutput(job, true);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FileOutputFormat.setOutputCompressorClass(job, SnappyCodec.class);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置文件：&quot;&gt;&lt;a href=&quot;#配置文件：&quot; class=&quot;headerlink&quot; title=&quot;配置文件：&quot;&gt;&lt;/a&gt;配置文件：&lt;/h3&gt;&lt;p&gt;找到mapred-site.xml文件。  如： 我公司集群环境配置。&lt;br&gt;Map端输出压缩配置：  我希望Map段输出压缩，并使用Snappy算法压缩&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;name&amp;gt;mapred.compress.map.output&amp;lt;/name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;lt;property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;name&amp;gt;mapred.map.output.compression.codec&amp;lt;/name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;value&amp;gt;org.apache.hadoop.io.compress.SnappyCodec&amp;lt;/value&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*Reduce端输出压缩配置： 我不希望Reduce的输出文件进行压缩。所以使用默认*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;name&amp;gt;mapred.output.compress&amp;lt;/name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;value&amp;gt;false&amp;lt;/value&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;name&amp;gt;mapred.output.compression.codec&amp;lt;/name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;value&amp;gt;org.apache.hadoop.io.compress.DefaultCodec&amp;lt;/value&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示： 如果使用的CDH版本，按照Cloudera官网的Hadoop配置，默认配置了Mapper阶段进行文件压缩。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;项目实战运用&quot;&gt;&lt;a href=&quot;#项目实战运用&quot; class=&quot;headerlink&quot; title=&quot;项目实战运用&quot;&gt;&lt;/a&gt;项目实战运用&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;如下是参考的一篇博客的介绍，并非个人实战经验，有待验证&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;项目中使用clearspring公司开源的基数估计的概率算法：stream-lib，用于解决去重计算问题，如UV计算等，它的特点在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个UV的计算，可以限制在一个固定大小的位图空间内完成（不同大小，对应不同的误差率），如8K，64K；&lt;/li&gt;
&lt;li&gt;不同的位图可以进行合并操作，得到合并后的UV。&lt;br&gt;当系统中维护的位图越多的时候，不管是在内存中，还是在存储系统（MySQL、HBase等）中，都会占用相当大的存储空间。因此，需要考虑采取合适的算法来压缩位图。这里分为以下两类情况：&lt;/li&gt;
&lt;li&gt;当位图在内存中时，此时压缩算法的选择，必须有尽可能快的压缩和解压速度，同时不能消耗过多CPU资源，因此，适合使用LZO或Snappy这样的压缩算法，做到快速的压缩和解压；&lt;/li&gt;
&lt;li&gt;当位图存储到DB中时，更关注的是存储空间的节省，要有尽可能高的压缩率，因此，适合使用GZIP这样的压缩算法，同时在从内存Dump到DB的过程也可以减少网络IO的传输开销。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Mapreduce 程序执行可以分为三个阶段：&lt;br&gt;1、Mapper 阶段&lt;br&gt;&lt;strong&gt;从HDFS中读取数据源，将计算结果写入HDFS&lt;/strong&gt;&lt;br&gt;2、Suffle与排序阶段&lt;br&gt;&lt;strong&gt;从HDFS中读取Mapper阶段结果数据，并进行混排
    
    </summary>
    
      <category term="大数据开发" scheme="http://cmp-cc.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Hadoop" scheme="http://cmp-cc.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop日常实战 计数器</title>
    <link href="http://cmp-cc.github.io/2014/12/16/Hadoop%E6%97%A5%E5%B8%B8%E5%AE%9E%E6%88%98%20%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    <id>http://cmp-cc.github.io/2014/12/16/Hadoop日常实战 计数器/</id>
    <published>2014-12-16T09:26:00.000Z</published>
    <updated>2016-04-08T11:51:45.958Z</updated>
    
    <content type="html">&lt;p&gt;计数器是一种收集作业统计信息的有效有段&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;在一般情况下，我很需要了解一下Mapreduce 的运行情况，运行的过程是不可见，程序运行成功，但我们不能保证数据是正确的。我们需要质量控制、应用级统计。计数器可以辅助诊断系统故障，检测某一事件是否发生。计数特定属性、方法、异常。然后进一步分析程序数据的正确性。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;内置计数器控制台视图&quot;&gt;&lt;a href=&quot;#内置计数器控制台视图&quot; class=&quot;headerlink&quot; title=&quot;内置计数器控制台视图&quot;&gt;&lt;/a&gt;内置计数器控制台视图&lt;/h2&gt;&lt;p&gt;Hadoop 中的内置计数器，用于帮助你分析Mapreduce执行程序的具体状体。&lt;/p&gt;
&lt;p&gt;如下是&lt;code&gt;Hadoop 2.0.0-cdh4.7.0&lt;/code&gt; Hadoop Mapreudce执行程序控制台显示&lt;/p&gt;
&lt;img src=&quot;/2014/12/16/Hadoop日常实战%20计数器/QQ图片20141211110508.png&quot; alt=&quot;内置计数器&quot; title=&quot;内置计数器&quot;&gt;
&lt;p&gt; &lt;strong&gt;Counter有组（group）的概念，用于表示逻辑上相同范围的所有数值。&lt;/strong&gt;&lt;br&gt;上图默认输出Counter分为三个组，从中我们可以分析出程序运行使用 CPU、内存、IO读写、网络流量的一个基本情况 &lt;/p&gt;
&lt;p&gt;文章推荐: &lt;a href=&quot;http://www.cnblogs.com/ggjucheng/archive/2013/05/08/3065220.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/ggjucheng/archive/2013/05/08/3065220.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;内置计数器的分类：&quot;&gt;&lt;a href=&quot;#内置计数器的分类：&quot; class=&quot;headerlink&quot; title=&quot;内置计数器的分类：&quot;&gt;&lt;/a&gt;内置计数器的分类：&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分组&lt;/th&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mapreduce任务计数器&lt;/td&gt;
&lt;td&gt;org.apache.hadoop.mapreduce. TaskCounter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;任务计数器&lt;/td&gt;
&lt;td&gt;org.apache.hadoop.mapreduce. JobCounter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文件系统计数器&lt;/td&gt;
&lt;td&gt;org.apache.hadoop.mapreduce.FileSystemCounter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输入文件计数器&lt;/td&gt;
&lt;td&gt;org.apache.hadoop.mapreduce.lib.input. FileInputFormatCounter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输出文件计数器&lt;/td&gt;
&lt;td&gt;org.apache.hadoop.mapreduce.lib.output. FileOutputFormatCounter&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;这些就是hadoop 内置的计数器类（组），均是枚举类型。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;静态计数器和动态计数器&quot;&gt;&lt;a href=&quot;#静态计数器和动态计数器&quot; class=&quot;headerlink&quot; title=&quot;静态计数器和动态计数器&quot;&gt;&lt;/a&gt;静态计数器和动态计数器&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;静态计数器&lt;br&gt;&lt;strong&gt;定义一个枚举(enum) 枚举的名称即使Counter组的名称。 枚举属性即使要记录的数值名称，Mapreduce框架将跨所有map和reduce聚集这些计数器，并在作业结束时产生一个结果。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static enum ReporInfo&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 统计map端读取数据是否按预期。 MISSING输出为0，表示没有输入数据完整或无缺损。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MISSING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//通过Mapper中的context对象进行计数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.getCounter(Temperature.MISSING).increment(1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动态计数器&lt;br&gt;&lt;strong&gt;动态计数器使用更加简单,你需要指定两个变量，这个变量均是动态指定。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 组的名称  和  动态计数的字段名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.getCounter(&amp;quot;group name&amp;quot;,&amp;quot;dynamic args&amp;quot;).increment(1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;比较&lt;br&gt;&lt;strong&gt;静态类型： 先将java枚举类型转换成String类型，再通过RPC发送计数器，两种创建和访问计数器方法(枚举类型和String类型) 实际是等价的。&lt;br&gt;相比之下，枚举类型易于使用，还提供类型安全，使用与大多数作业，特定场合使用动态计数器。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;通过计数器获取Mapreduce的运行情况&quot;&gt;&lt;a href=&quot;#通过计数器获取Mapreduce的运行情况&quot; class=&quot;headerlink&quot; title=&quot;通过计数器获取Mapreduce的运行情况&quot;&gt;&lt;/a&gt;通过计数器获取Mapreduce的运行情况&lt;/h2&gt;&lt;p&gt;获取计数器：  作业长时间运行，我们需要通过计数器了解运行情况。我们只需要写一个监听类就可以。&lt;br&gt;如下是Mapreduce2.0写法，同样需要引用1.0中的JobClient类。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String jobID = args[0];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JobClient jobClient = new JobClient(new JobConf(getConf()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RunningJob job = jobClient.getJob(JobID.forName(jobID));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Counters counters = job.getCounters();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long missing = counters.getCounter(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MaxTemperatureWithCounters.Temperature.MISSING);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long total = counters.getCounter(Task.Counter.MAP_INPUT_RECORDS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.printf(&amp;quot;Records with missing temperature fields: %.2f%%\n&amp;quot;,100.0 * missing / total);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;计数器原理&quot;&gt;&lt;a href=&quot;#计数器原理&quot; class=&quot;headerlink&quot; title=&quot;计数器原理&quot;&gt;&lt;/a&gt;计数器原理&lt;/h2&gt;&lt;img src=&quot;/2014/12/16/Hadoop日常实战%20计数器/c5c20a58-0087-49b2-a5d5-91ca4ae38066.jpg&quot; alt=&quot;计数器原理图&quot; title=&quot;计数器原理图&quot;&gt;
&lt;ul&gt;
&lt;li&gt;计数器实质是由JobTracker维护，计数器值会定期传到tasktracker，在由tasktracker传递给jobtracker。也就是说所有的计数器信息都是存在jobTracker的内存中，计数器序列化并状态更新同步到JobTracker。&lt;/li&gt;
&lt;li&gt;TaskTracker中累加计数器 记录单节点中的计数个数。通过“心跳“ 传递信息给JobTracker。&lt;/li&gt;
&lt;li&gt;JobTracker会下运行结束之前最终汇总时剔除掉失败任务计数器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mapreduce1.0中并没有限制计数器的个数，极其影响程序性能。&lt;br&gt;为了不对JobTracker产生印象。计数器数目应当控制到100以下。&lt;/p&gt;
&lt;p&gt;如果你的计数器超过了120个就会报如下错误：&lt;br&gt;org.apache.hadoop.mapreduce.counters.LimitExceededException: Too many counters: 121 max=120&lt;/p&gt;
&lt;h2 id=&quot;异常处理&quot;&gt;&lt;a href=&quot;#异常处理&quot; class=&quot;headerlink&quot; title=&quot;异常处理&quot;&gt;&lt;/a&gt;异常处理&lt;/h2&gt;&lt;p&gt;你可能遇到如下异常&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;14/12/12 09:56:48 INFO mapred.JobClient: Task Id : attempt_201412091419_0236_m_000028_0, Status : FAILED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Error: Found interface org.apache.hadoop.mapreduce.Counter, but class was expected&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原因：&lt;br&gt;&lt;strong&gt;你本地的使用的编译环境是Hadoop1.0(MR1) 而你的集群环境为hadoop2.0(MR2) 所以默认没有找到。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;解决方案&lt;br&gt;更改为hadoop2.0(hadoop-mapreduce-client-core-2.0.0-cdh4.7.0.jar，hadoop-common-2.0.0-cdh4.7.0.jar)的jar。和集群环境保持一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;推荐Blog：&lt;br&gt;&lt;a href=&quot;http://langyu.iteye.com/blog/1171091&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://langyu.iteye.com/blog/1171091&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;计数器是一种收集作业统计信息的有效有段&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;在一般情况下，我很需要了解一下Mapreduce 的运行情况，运行的过程是不可见，程序运行成功，但我们不能保证数据是正确的。我们需要质量控制、应用级统计。计数器可以辅助诊断系统故障，检测某一事件是否发
    
    </summary>
    
      <category term="大数据开发" scheme="http://cmp-cc.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Hadoop" scheme="http://cmp-cc.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Maven3 setting.xml 设置</title>
    <link href="http://cmp-cc.github.io/2014/04/13/Maven3%20setting.xml%20%E8%AE%BE%E7%BD%AE/"/>
    <id>http://cmp-cc.github.io/2014/04/13/Maven3 setting.xml 设置/</id>
    <published>2014-04-13T08:54:00.000Z</published>
    <updated>2016-04-12T08:40:58.759Z</updated>
    
    <content type="html">&lt;h2 id=&quot;不要修改setting-xml地址-和-仓库地址地址&quot;&gt;&lt;a href=&quot;#不要修改setting-xml地址-和-仓库地址地址&quot; class=&quot;headerlink&quot; title=&quot;不要修改setting.xml地址 和 仓库地址地址&quot;&gt;&lt;/a&gt;不要修改setting.xml地址 和 仓库地址地址&lt;/h2&gt;&lt;p&gt;Maven3 默认setting.xml文件地址和仓库地址为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C:/Users/用户名称/.m2/setting.xml&lt;br&gt;C:/Users/用户名称/.m2/repository&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;你可能觉得仓库地址在C盘有点不合理，它在我指定的目录不是更好吗？  例如：D:/Work-Repository/Maven-Repository&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;于是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你复制setting.xml 文件到 D:/Work-Repository/Maven-Repository&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改setting.xml Maven仓库&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;localRepository&amp;gt;D:/Work-Repository/Mvn-Repository&amp;lt;/localRepository&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改STS/IDEA/MyEclipse 中的setting.xml 地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;OK，你成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是：&lt;br&gt;&lt;strong&gt;你可能忘了你有多个工作目录。偶尔你新建一个工作目录，忘了改setting.xml&lt;br&gt;糟糕的事情发生了&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么还要重复下载Jar？&lt;/li&gt;
&lt;li&gt;八嘎！ 为什么两个仓库都在用啊~~   恍然大悟！！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;修改你的镜像地址&quot;&gt;&lt;a href=&quot;#修改你的镜像地址&quot; class=&quot;headerlink&quot; title=&quot;修改你的镜像地址&quot;&gt;&lt;/a&gt;修改你的镜像地址&lt;/h2&gt;&lt;p&gt;国外的源总是缓慢的，比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://my.repository.com/repo/path&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://my.repository.com/repo/path&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用OSChina Maven仓库，如下配置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;mirrors&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;mirror&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;id&amp;gt;mirrorId&amp;lt;/id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;mirrorOf&amp;gt;repositoryId&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;name&amp;gt;Human Readable Name for this Mirror.&amp;lt;/name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;url&amp;gt;http://my.repository.com/repo/path&amp;lt;/url&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/mirror&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/mirrors&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示，OSChina源也有不好使的地方，比如：引入嵌入式数据库： H2，它就找不到，这个时候，你需要切换到其他源或在pom.xml 指定下载源地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;想到了，日后再更新。&quot;&gt;&lt;a href=&quot;#想到了，日后再更新。&quot; class=&quot;headerlink&quot; title=&quot;想到了，日后再更新。&quot;&gt;&lt;/a&gt;想到了，日后再更新。&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;不要修改setting-xml地址-和-仓库地址地址&quot;&gt;&lt;a href=&quot;#不要修改setting-xml地址-和-仓库地址地址&quot; class=&quot;headerlink&quot; title=&quot;不要修改setting.xml地址 和 仓库地址地址&quot;&gt;&lt;/a&gt;不要修改sett
    
    </summary>
    
      <category term="项目构建" scheme="http://cmp-cc.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="Maven" scheme="http://cmp-cc.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 语义化标签</title>
    <link href="http://cmp-cc.github.io/2014/01/03/HTML5%20%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/"/>
    <id>http://cmp-cc.github.io/2014/01/03/HTML5 语义化标签/</id>
    <published>2014-01-03T08:43:00.000Z</published>
    <updated>2016-04-08T08:23:52.427Z</updated>
    
    <content type="html">&lt;p&gt;前段时间看了一本《HTML5 实战》 ，也只是为了关注一下HTML5的发展和趋势。&lt;/p&gt;
&lt;p&gt;看的我头大，这本书只是做个了HTML5的介绍，算不上实战，很多例子含糊不清。&lt;/p&gt;
&lt;p&gt;HTML5 中新的语义化标签，还是让我眼前一亮。&lt;/p&gt;
&lt;h2 id=&quot;HTML5-中的新特性&quot;&gt;&lt;a href=&quot;#HTML5-中的新特性&quot; class=&quot;headerlink&quot; title=&quot;HTML5 中的新特性&quot;&gt;&lt;/a&gt;HTML5 中的新特性&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;HTML5 中的核心特性，先记录一下,方便日后查阅&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新的语义化标签&lt;/li&gt;
&lt;li&gt;表单与表单API&lt;/li&gt;
&lt;li&gt;Canvas API&lt;/li&gt;
&lt;li&gt;拖放 API&lt;/li&gt;
&lt;li&gt;地理位置 API&lt;/li&gt;
&lt;li&gt;WEB存储 API&lt;/li&gt;
&lt;li&gt;IndexedDB API&lt;/li&gt;
&lt;li&gt;文件&lt;/li&gt;
&lt;li&gt;通信API&lt;/li&gt;
&lt;li&gt;WEB workers API&lt;/li&gt;
&lt;li&gt;历史 API&lt;/li&gt;
&lt;li&gt;脱机 API&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;HTML5-语义化标签&quot;&gt;&lt;a href=&quot;#HTML5-语义化标签&quot; class=&quot;headerlink&quot; title=&quot;HTML5 语义化标签&quot;&gt;&lt;/a&gt;HTML5 语义化标签&lt;/h2&gt;&lt;h3 id=&quot;HTML-结构语义&quot;&gt;&lt;a href=&quot;#HTML-结构语义&quot; class=&quot;headerlink&quot; title=&quot;HTML 结构语义&quot;&gt;&lt;/a&gt;HTML 结构语义&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;HTML 整体结构所需的标签语义&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标签&lt;/th&gt;
&lt;th&gt;语义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;这个元素表示一组介绍性的内容，适用于文档的不同节，他既可以包含节标题，也可以包含索引、搜索表单、logo等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nav&lt;/td&gt;
&lt;td&gt;这个元素表示包含导航链接的节，如菜单或索引，并非所有的网页链接都要加&lt;nav&gt;元素中，只有主要的导航块才需要加到元素中。&lt;/nav&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;section&lt;/td&gt;
&lt;td&gt;这个元素表示文档中的普通的节，通常，它可用于创建多个内容块（如：列） 从而对具有特定主题的内容进行分组，如图书的章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aside&lt;/td&gt;
&lt;td&gt;这个元素表示与内容相关但不属于它的内容，如：引用，边侧栏，广告&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;footer&lt;/td&gt;
&lt;td&gt;这个元素表示与父级元素相关的额外信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;article&lt;/td&gt;
&lt;td&gt;这个元素表示重要信息的独立部分–例如，报纸上或博客中的文章，&lt;article&gt;可以嵌套，也可以用于在相关项列表中显示一个&lt;/article&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hgroup&lt;/td&gt;
&lt;td&gt;如果有多级标题，请使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;figure&lt;/td&gt;
&lt;td&gt;这个元素表示主内容引用内容独立部分(图像，图表，视频)，这个信息可以从主内容删除，而不会影响其常规流。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;figcaption&lt;/td&gt;
&lt;td&gt;这个元素可以用于显示表题，或者与figure 一起用，例如： 图形的描述信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mark&lt;/td&gt;
&lt;td&gt;这个元素可以突出显示特殊情况下的重要文字，或者是对应的用户输入。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;small&lt;/td&gt;
&lt;td&gt;这个元素表示边侧评论，如附属细则(负责声明，法律限制，版权)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cite&lt;/td&gt;
&lt;td&gt;这个元素可以用于显示作品标题(图书、电影、诗歌)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;address&lt;/td&gt;
&lt;td&gt;显示article或者整个文档的合同信息，且应该位于footer中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;显示人和机器可读的日期和时间。 datetime属性，pubdate表示出版日期&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;HTML-文档语义&quot;&gt;&lt;a href=&quot;#HTML-文档语义&quot; class=&quot;headerlink&quot; title=&quot;HTML 文档语义&quot;&gt;&lt;/a&gt;HTML 文档语义&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;HTML 作用于文本标签语义&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标签&lt;/th&gt;
&lt;th&gt;语义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;定义日期或时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;em&lt;/td&gt;
&lt;td&gt;强调&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strong&lt;/td&gt;
&lt;td&gt;重要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;small&lt;/td&gt;
&lt;td&gt;旁注&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cite&lt;/td&gt;
&lt;td&gt;作品引用 （标题）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;td&gt;引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dfn&lt;/td&gt;
&lt;td&gt;举例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;abbr&lt;/td&gt;
&lt;td&gt;缩写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;code&lt;/td&gt;
&lt;td&gt;计算机代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;var&lt;/td&gt;
&lt;td&gt;变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;samp&lt;/td&gt;
&lt;td&gt;计算机输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kbd&lt;/td&gt;
&lt;td&gt;用户输入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sub&lt;/td&gt;
&lt;td&gt;下标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sup&lt;/td&gt;
&lt;td&gt;上标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;备选项 大部分用于发言、技术短语等情况。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;关键字 表示在不增加额外重要性的同时将词或短语高亮显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mart&lt;/td&gt;
&lt;td&gt;高亮&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ruby、rb、rt、rp&lt;/td&gt;
&lt;td&gt;注释 [一种排版注释系统(位于横排文本上方的简短文字)]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bdi&lt;/td&gt;
&lt;td&gt;文本方向间离&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bdo&lt;/td&gt;
&lt;td&gt;文本方向格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;span&lt;/td&gt;
&lt;td&gt;其他&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;br&lt;/td&gt;
&lt;td&gt;换行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wbr&lt;/td&gt;
&lt;td&gt;可选折行 [长单词的破择号 (让浏览器决定是否换行)]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h1 ~ h6&lt;/td&gt;
&lt;td&gt;一级标题 至 六级标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;figure、figcaption&lt;/td&gt;
&lt;td&gt;figure 独立的流（图片、图像、图表）figcaption 标题&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间看了一本《HTML5 实战》 ，也只是为了关注一下HTML5的发展和趋势。&lt;/p&gt;
&lt;p&gt;看的我头大，这本书只是做个了HTML5的介绍，算不上实战，很多例子含糊不清。&lt;/p&gt;
&lt;p&gt;HTML5 中新的语义化标签，还是让我眼前一亮。&lt;/p&gt;
&lt;h2 id=&quot;HTML5
    
    </summary>
    
      <category term="Web" scheme="http://cmp-cc.github.io/categories/Web/"/>
    
    
      <category term="HTML5" scheme="http://cmp-cc.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>贫血模型和充血模型</title>
    <link href="http://cmp-cc.github.io/2013/12/14/%E8%B4%AB%E8%A1%80%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%85%85%E8%A1%80%E6%A8%A1%E5%9E%8B/"/>
    <id>http://cmp-cc.github.io/2013/12/14/贫血模型和充血模型/</id>
    <published>2013-12-14T08:53:00.000Z</published>
    <updated>2016-04-07T06:24:53.828Z</updated>
    
    <content type="html">&lt;p&gt;大多数情况下，我忍不住赋予Model行为，我并不知道它是否合理，了解一下领域模型中的贫血模型和充血模型，无意中发现还有胀血模型和失血模型。 如下是自己（cmp-cc）的理解：&lt;/p&gt;
&lt;h2 id=&quot;模型-（Model）&quot;&gt;&lt;a href=&quot;#模型-（Model）&quot; class=&quot;headerlink&quot; title=&quot;模型 （Model）&quot;&gt;&lt;/a&gt;模型 （Model）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;无论是贫血模型还是充血模型，他们都符合POJO （也可以认为JavaBean）。&lt;br&gt;&lt;strong&gt;Model包含属性的&lt;code&gt;get&lt;/code&gt;、&lt;code&gt;set&lt;/code&gt;方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;模型的本质充当数据容器（保存状态，传递状态）。&lt;br&gt;&lt;strong&gt;模型是一种特殊的数据结构&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;失血模型&quot;&gt;&lt;a href=&quot;#失血模型&quot; class=&quot;headerlink&quot; title=&quot;失血模型&quot;&gt;&lt;/a&gt;失血模型&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;失血模型就是POJO对象，模型仅仅包含数据的定义和getter/setter方法，业务逻辑和应用逻辑都放到服务层（Service）中。&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;层次表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UI(视图层) -&amp;gt; Control(控制层) -&amp;gt; Service（服务层） -&amp;gt; DAO （持久化层） -&amp;gt;domain object （领域对象 Model ）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;领域对象不具备任何行为（仅仅是一个POJO对象），所有的行为都在Service层。&lt;/li&gt;
&lt;li&gt;领域对象的作用。&lt;ul&gt;
&lt;li&gt;充当数据容器。&lt;/li&gt;
&lt;li&gt;对象关系映射（ORM）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这种模型很容易理解和掌握。&lt;/li&gt;
&lt;li&gt;优点&lt;ul&gt;
&lt;li&gt;层次结构清晰，单项依赖，易于维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点&lt;ul&gt;
&lt;li&gt;Service 层挤压严重。（业务逻辑职责） &lt;/li&gt;
&lt;li&gt;部分与数据操作相关的行为，必须通过Service层进行修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;贫血模型&quot;&gt;&lt;a href=&quot;#贫血模型&quot; class=&quot;headerlink&quot; title=&quot;贫血模型&quot;&gt;&lt;/a&gt;贫血模型&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;贫血模型中包含了一些业务逻辑，但不包含依赖持久层的业务逻辑。这部分依赖于持久层的业务逻辑将会放到服务层中。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;层次表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UI(视图层) -&amp;gt; Control(控制层) -&amp;gt; Service（服务层） -&amp;gt; DAO （持久化层） -&amp;gt;domain object （Model）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;继承失血模型特性&lt;/li&gt;
&lt;li&gt;领域对象具备简单行为，如下特点。&lt;ul&gt;
&lt;li&gt;行为不具备持久化特性。（不与数据库打交道，也就是不依赖于DAO层）&lt;/li&gt;
&lt;li&gt;具备与数据相关的业务行为。（部分Service行为 移至 Model）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同样与失血模型同样的痛处&lt;ul&gt;
&lt;li&gt;系统越复杂，维护成本越高，Service层（业务逻辑）挤压严重。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;充血模型&quot;&gt;&lt;a href=&quot;#充血模型&quot; class=&quot;headerlink&quot; title=&quot;充血模型&quot;&gt;&lt;/a&gt;充血模型&lt;/h2&gt;&lt;p&gt;**充血模型中包含了所有的业务逻辑，包括依赖于持久层的业务逻辑。所以，使用充血模型的领域层是依赖于持久层。&lt;/p&gt;
&lt;p&gt;层次表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UI -&amp;gt; Control -&amp;gt; Service -&amp;gt; domain object &amp;lt;–&amp;gt; DAO&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Service 层被减轻，不和DAO打交道，只包含业务逻辑。&lt;/li&gt;
&lt;li&gt;领域对象 和 DAO 双向依赖。&lt;/li&gt;
&lt;li&gt;优点&lt;ul&gt;
&lt;li&gt;减轻了Service层。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点&lt;ul&gt;
&lt;li&gt;Service 将直接依赖于领域对象。 领域对象同样具备部分业务，可能会造成职责混乱，或者使领域对象不具备业务I行为&lt;/li&gt;
&lt;li&gt;领域对象与DAO双向依赖，部分职责容易混响。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;胀血模型&quot;&gt;&lt;a href=&quot;#胀血模型&quot; class=&quot;headerlink&quot; title=&quot;胀血模型&quot;&gt;&lt;/a&gt;胀血模型&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;胀血模型就是把和业务逻辑不想关的其他应用逻辑（如授权、事务等）都放到领域模型中。我感觉胀血模型反而是另外一种的失血模型，因为服务层消失了，领域层干了服务层的事，到头来还是什么都没变。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;层次表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UI -&amp;gt; Control -&amp;gt; domain object &amp;lt;–&amp;gt; DAO&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;没有了服务层，领域对象包含所有业务逻辑，并双向依赖与持久化层。&lt;/li&gt;
&lt;li&gt;优点&lt;ul&gt;
&lt;li&gt;分层极其简单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点&lt;ul&gt;
&lt;li&gt;领域对象职责过多，挤压严重，极其不稳定，不易维护。&lt;/li&gt;
&lt;li&gt;控制层访问领域对象能够看到不必要的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;失血模型和胀血模型并不被提倡，主要原因：领域模型内聚职责过少，或者过多。&lt;br&gt;关于贫血模型和充血模型的选型，其实跟语言架构有关（Robin提出）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果使用Spring，必须贫血模型。&lt;/li&gt;
&lt;li&gt;如果使用RoR，直接充血模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/always_my_fault/article/details/2063612&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/always_my_fault/article/details/2063612&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.oschina.net/question/54100_10400&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.oschina.net/question/54100_10400&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.360doc.com/content/12/0423/03/9318309_205785083.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.360doc.com/content/12/0423/03/9318309_205785083.shtml&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;大多数情况下，我忍不住赋予Model行为，我并不知道它是否合理，了解一下领域模型中的贫血模型和充血模型，无意中发现还有胀血模型和失血模型。 如下是自己（cmp-cc）的理解：&lt;/p&gt;
&lt;h2 id=&quot;模型-（Model）&quot;&gt;&lt;a href=&quot;#模型-（Model）&quot; cla
    
    </summary>
    
      <category term="架构设计" scheme="http://cmp-cc.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="DDD (领域驱动设计)" scheme="http://cmp-cc.github.io/tags/DDD-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Java" scheme="http://cmp-cc.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Maven 服务器插件Jetty</title>
    <link href="http://cmp-cc.github.io/2013/10/16/Maven%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8F%92%E4%BB%B6Jetty/"/>
    <id>http://cmp-cc.github.io/2013/10/16/Maven 服务器插件Jetty/</id>
    <published>2013-10-16T00:54:00.000Z</published>
    <updated>2016-04-07T09:38:42.001Z</updated>
    
    <content type="html">&lt;p&gt;一个常规的Java Web 你需要部署到Tomcat中，使用Maven构建Web项目使用Jetty 容器，使运行Java Web项目更加方便。&lt;/p&gt;
&lt;h2 id=&quot;Jetty-完整性配置&quot;&gt;&lt;a href=&quot;#Jetty-完整性配置&quot; class=&quot;headerlink&quot; title=&quot;Jetty 完整性配置&quot;&gt;&lt;/a&gt;Jetty 完整性配置&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;webapp.port&amp;gt;8083&amp;lt;/webapp.port&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;webapp.stopPort&amp;gt;9090&amp;lt;/webapp.stopPort&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;webapp.path&amp;gt;/&amp;lt;/webapp.path&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;jetty-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;version&amp;gt;8.1.13.v20130916&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;configuration&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;webAppConfig&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;contextPath&amp;gt;$&amp;#123;webapp.path&amp;#125;&amp;lt;/contextPath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;defaultsDescriptor&amp;gt;webdefault.xml&amp;lt;/defaultsDescriptor&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/webAppConfig&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;connectors&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;connector implementation=&amp;quot;org.eclipse.jetty.server.nio.SelectChannelConnector&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;port&amp;gt;$&amp;#123;webapp.port&amp;#125;&amp;lt;/port&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;maxIdleTime&amp;gt;60000&amp;lt;/maxIdleTime&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/connector&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/connectors&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;reload&amp;gt;automatic&amp;lt;/reload&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;scanIntervalSeconds&amp;gt;0&amp;lt;/scanIntervalSeconds&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;!-- stopPort&amp;gt;$&amp;#123;webapp.stopPort&amp;#125;&amp;lt;/stopPort --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;systemProperties&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;systemProperty&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;org.mortbay.util.URI.charset&amp;lt;/name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;UTF-8&amp;lt;/value&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/systemProperty&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/systemProperties&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;jvmArgs&amp;gt;-Xmx512m -XX:PermSize=128m -XX:MaxPermSize=256m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            -Dfile.encoding=UTF-8&amp;lt;/jvmArgs&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;executions&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;execution&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;id&amp;gt;start-jetty&amp;lt;/id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;phase&amp;gt;pre-integration-test&amp;lt;/phase&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;goals&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;goal&amp;gt;run&amp;lt;/goal&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/goals&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;configuration&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;scanIntervalSeconds&amp;gt;0&amp;lt;/scanIntervalSeconds&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;daemon&amp;gt;true&amp;lt;/daemon&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/execution&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;execution&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;id&amp;gt;stop-jetty&amp;lt;/id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;phase&amp;gt;post-integration-test&amp;lt;/phase&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;goals&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;goal&amp;gt;stop&amp;lt;/goal&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/goals&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/execution&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/executions&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;运行命令 &lt;code&gt;jetty:run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;停止运行&lt;code&gt;jetty:stop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Jetty-可配置参数&quot;&gt;&lt;a href=&quot;#Jetty-可配置参数&quot; class=&quot;headerlink&quot; title=&quot;Jetty 可配置参数&quot;&gt;&lt;/a&gt;Jetty 可配置参数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;scanIntervalSeconds 表示扫时间，避免重复运行，它会自动检测是否修改项目文件&lt;/li&gt;
&lt;li&gt;jvmArgs JVM 堆栈大小&lt;/li&gt;
&lt;li&gt;port 端口号&lt;/li&gt;
&lt;li&gt;contextPath 项目路径&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一个常规的Java Web 你需要部署到Tomcat中，使用Maven构建Web项目使用Jetty 容器，使运行Java Web项目更加方便。&lt;/p&gt;
&lt;h2 id=&quot;Jetty-完整性配置&quot;&gt;&lt;a href=&quot;#Jetty-完整性配置&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="项目构建" scheme="http://cmp-cc.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="Maven" scheme="http://cmp-cc.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Java项目开发中的简称</title>
    <link href="http://cmp-cc.github.io/2013/08/12/Java%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%AE%80%E7%A7%B0/"/>
    <id>http://cmp-cc.github.io/2013/08/12/Java项目开发中的简称/</id>
    <published>2013-08-12T06:13:00.000Z</published>
    <updated>2016-04-08T11:54:28.037Z</updated>
    
    <content type="html">&lt;p&gt;Java项目开发中的简称，这些简称尤其应用到Java项目分层上。 传统的MVC，可以能只是三层架构。分为View、Control、Model。 有些简写的分层，在看别人代码的时候，可能一下反应不过来它是干什么的？ 这里仔细总结一下，我觉得非常有用，它使我们的代码结构更加清晰。&lt;/p&gt;
&lt;p&gt;大部分的缩写源于： 领域模型驱动（DDD）。&lt;/p&gt;
&lt;p&gt;大致如下缩写：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POJO (Plain Ordinary Java Object) 简单java对象&lt;/li&gt;
&lt;li&gt;DAO (Data Access Object) 数据访问对象&lt;/li&gt;
&lt;li&gt;DTO (Data Transfer Object) 数据传输对象&lt;/li&gt;
&lt;li&gt;VO (View Object) 值对象&lt;/li&gt;
&lt;li&gt;BO (Business Object) 业务对象&lt;/li&gt;
&lt;li&gt;PO (Persistant Object) 持久化对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考了一些文章，加上自己的理解&lt;/p&gt;
&lt;p&gt;首先要理解什么是JavaBean 、Model、Entity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaBean&lt;br&gt;&lt;strong&gt;JavaBean是一种规范，也即包含一组set和get方法的Java对象。Model、Entity、POJO、DTO、BO都属于JavaBean，因为他们符合这种规范。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;JavaBean分为业务Bean和数据Bean。数据Bean其实就Entity(实体对象)，业务Bean 就是（BO 业务对象）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Model&lt;br&gt;&lt;strong&gt;Model是MVC概念之一。也就是Model层用于存储实体对象（Entity）。Model通常 等价于Entity 用DAO层持久化对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Entity&lt;br&gt;&lt;strong&gt;Entity 为实体对象。你把它就做POJO、Model、JavaBean，也没人敢说你一定错误。他主要作用为数据（数据库数据）做持久化。 一旦将数据库中的一条数据存储Entity中，你把它叫做PO对象，也是对的。他只是 领域模型驱动中的概念之一&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;简单java对象-POJO&quot;&gt;&lt;a href=&quot;#简单java对象-POJO&quot; class=&quot;headerlink&quot; title=&quot;简单java对象 (POJO)&quot;&gt;&lt;/a&gt;简单java对象 (POJO)&lt;/h2&gt;&lt;p&gt;普通的Java对象，对于属性一般实现了JavaBean的标准，另外还可以包含一些简单的业务逻辑(方法)。&lt;/p&gt;
&lt;p&gt;一个POJO持久化以后就是PO&lt;br&gt;直接用它传递、传递过程中就是DTO&lt;br&gt;直接用来对应表示层就是VO&lt;/p&gt;
&lt;h2 id=&quot;数据访问对象-DAO&quot;&gt;&lt;a href=&quot;#数据访问对象-DAO&quot; class=&quot;headerlink&quot; title=&quot;数据访问对象 (DAO)&quot;&gt;&lt;/a&gt;数据访问对象 (DAO)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;DAO 数据访问对象，主要用于封装数据库的访问，通过它可以把POJO持久化为PO，用PO组装出来VO、DTO。&lt;/li&gt;
&lt;li&gt;我们还会把DAO叫做持久化层。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;数据传输对象-DTO&quot;&gt;&lt;a href=&quot;#数据传输对象-DTO&quot; class=&quot;headerlink&quot; title=&quot;数据传输对象 (DTO)&quot;&gt;&lt;/a&gt;数据传输对象 (DTO)&lt;/h2&gt;&lt;p&gt;Data Transfer Object数据传输对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DTO的概念是J2EE提出，主要用于分布式应用，用于服务之间的数据传输。&lt;/li&gt;
&lt;li&gt;分布式应用（JSONP、RCP、RMI等 远程方法或过程调用）之间的数据传输对象使用DTO。&lt;/li&gt;
&lt;li&gt;单系统中用于展示层与服务层之间的数据传输&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;值对象-VO&quot;&gt;&lt;a href=&quot;#值对象-VO&quot; class=&quot;headerlink&quot; title=&quot;值对象 (VO)&quot;&gt;&lt;/a&gt;值对象 (VO)&lt;/h2&gt;&lt;p&gt;ViewObject表现层对象 （展示层）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要对应界面显示的数据值对象。它包含了界面（Web、Mobile、PC）所请求的数据信息。&lt;/li&gt;
&lt;li&gt;VO的数据值可以是一个或多个Model的子集或交集，主要目的构成响应（Response）所要展示的内容信息。&lt;/li&gt;
&lt;li&gt;VO值对象会转换为JSON、XML、HTML等格式返回给请求者。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;业务对象-BO&quot;&gt;&lt;a href=&quot;#业务对象-BO&quot; class=&quot;headerlink&quot; title=&quot;业务对象 (BO)&quot;&gt;&lt;/a&gt;业务对象 (BO)&lt;/h2&gt;&lt;p&gt;business object业务对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。&lt;br&gt;eg:&lt;br&gt;比如一个简历，有教育经历、工作经历、社会关系等等。&lt;br&gt;我们可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。&lt;br&gt;建立一个对应简历的BO对象处理简历，每个BO包含这些PO。&lt;br&gt;这样处理业务逻辑时，我们就可以针对BO去处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;持久化对象-PO&quot;&gt;&lt;a href=&quot;#持久化对象-PO&quot; class=&quot;headerlink&quot; title=&quot;持久化对象 (PO)&quot;&gt;&lt;/a&gt;持久化对象 (PO)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;最形象的理解就是一个PO就是数据库中的一条记录。 （好处是可以把一条记录作为一个对象处理，可以方便的转为其它对象。）&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/2013/08/12/Java项目开发中的简称/2013-02-12-java.png&quot; alt=&quot;整体的结构图&quot; title=&quot;整体的结构图&quot;&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;领域模型可以使得责任更加明确。&lt;/li&gt;
&lt;li&gt;有时候避免过度设计&lt;br&gt;不要陷入过度设计，大可不必为了设计而设计一定要在代码中区分各个对象,一句话技术是为应用服务的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.blogjava.net/vip01/archive/2007/01/08/92430.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.blogjava.net/vip01/archive/2007/01/08/92430.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://b-l-east.iteye.com/blog/1142800&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://b-l-east.iteye.com/blog/1142800&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.blogjava.net/johnnylzb/archive/2010/05/27/321968.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.blogjava.net/johnnylzb/archive/2010/05/27/321968.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Java项目开发中的简称，这些简称尤其应用到Java项目分层上。 传统的MVC，可以能只是三层架构。分为View、Control、Model。 有些简写的分层，在看别人代码的时候，可能一下反应不过来它是干什么的？ 这里仔细总结一下，我觉得非常有用，它使我们的代码结构更加清晰
    
    </summary>
    
      <category term="架构设计" scheme="http://cmp-cc.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="DDD (领域驱动设计)" scheme="http://cmp-cc.github.io/tags/DDD-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Java" scheme="http://cmp-cc.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JSP/Servlet3.0总结</title>
    <link href="http://cmp-cc.github.io/2013/03/05/JSPServlet3.0%E6%80%BB%E7%BB%93/"/>
    <id>http://cmp-cc.github.io/2013/03/05/JSPServlet3.0总结/</id>
    <published>2013-03-05T11:53:00.000Z</published>
    <updated>2016-04-12T07:27:26.648Z</updated>
    
    <content type="html">&lt;p&gt;总结下一JSP/Servlet3.0，记性不好，记录一下，容易反查。&lt;/p&gt;
&lt;h2 id=&quot;JSP&quot;&gt;&lt;a href=&quot;#JSP&quot; class=&quot;headerlink&quot; title=&quot;JSP&quot;&gt;&lt;/a&gt;JSP&lt;/h2&gt;&lt;h3 id=&quot;JSP-注释&quot;&gt;&lt;a href=&quot;#JSP-注释&quot; class=&quot;headerlink&quot; title=&quot;JSP 注释&quot;&gt;&lt;/a&gt;JSP 注释&lt;/h3&gt;&lt;h4 id=&quot;一种显示注释和三种隐式注释&quot;&gt;&lt;a href=&quot;#一种显示注释和三种隐式注释&quot; class=&quot;headerlink&quot; title=&quot;一种显示注释和三种隐式注释&quot;&gt;&lt;/a&gt;一种显示注释和三种隐式注释&lt;/h4&gt;&lt;p&gt;JSP中有两种注释方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;显示注释&lt;br&gt;&lt;strong&gt;显示注释就是HTML注释方式&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- 注释内容 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;隐式注释&lt;br&gt;&lt;strong&gt;JSP 注释方式&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%-- 注释内容 --%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;单行注释&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 注释内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;多行注释&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.注释内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.注释内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;显示注释和隐式注释的区别&quot;&gt;&lt;a href=&quot;#显示注释和隐式注释的区别&quot; class=&quot;headerlink&quot; title=&quot;显示注释和隐式注释的区别&quot;&gt;&lt;/a&gt;显示注释和隐式注释的区别&lt;/h4&gt;&lt;p&gt;Servlet渲染页面的过程如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JSP -&amp;gt; Servlet -&amp;gt; HTML&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;显示注释和隐式注释的区别:&lt;br&gt;&lt;strong&gt;渲染为HTML页面后，显示注释的内容会显示到页面中，而隐式注释不会显示到页面中。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Scriptle-脚本片段&quot;&gt;&lt;a href=&quot;#Scriptle-脚本片段&quot; class=&quot;headerlink&quot; title=&quot;Scriptle 脚本片段&quot;&gt;&lt;/a&gt;Scriptle 脚本片段&lt;/h3&gt;&lt;p&gt;我们将JSP中写Java代码片段（代码块）理解为Scriptle 脚本片段 。Scriptle 脚本片段我们考虑如下三种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;局部代码块&lt;br&gt;&lt;strong&gt;通过&lt;code&gt;&amp;lt;% Java %&amp;gt;&lt;/code&gt; 进行局部代码编写&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StringBuffer sb = new StringBuffer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// TODO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全局变量和方法&lt;br&gt;&lt;strong&gt;通过&lt;code&gt;&amp;lt;%！ Java %&amp;gt;&lt;/code&gt; 进行全局代码编写&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String user = &amp;quot;root&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String password = &amp;quot;123456&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输出&lt;br&gt;&lt;strong&gt;这里的输出要理解为渲染，它并不是将内容输出到控制台，而是渲染到页面上。  （特别说明）&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;输出有两种方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;&amp;lt;%= 内容 %&amp;gt;&lt;/code&gt; 进行内容输出&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;&amp;lt;p&amp;gt;cmp-cc.github.io 是一个Blog &amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;&amp;lt;% out.println(&amp;quot;内容&amp;quot;) %&amp;gt;&lt;/code&gt; 进行内容输出&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;% &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;out.println(&amp;quot;cmp-cc.github.io 是一个Blog&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Scriptlet-标签&quot;&gt;&lt;a href=&quot;#Scriptlet-标签&quot; class=&quot;headerlink&quot; title=&quot;Scriptlet 标签&quot;&gt;&lt;/a&gt;Scriptlet 标签&lt;/h3&gt;&lt;p&gt;HTML 中有Tag标签，每一标签有它特殊的含义和用途，JSP同样可以引入标签，我们称为：Scriptlet 标签 。&lt;br&gt;Scriptlet 标签是用来取代&amp;lt;%%&amp;gt; 这种形式，使得页面展示更加友好。&lt;/p&gt;
&lt;p&gt;吧啦吧啦！！！！  （一大堆使用Scriptlet 标签 取代 &amp;lt;%%&amp;gt; 的好处）。&lt;/p&gt;
&lt;p&gt;Scriptlet 标签基本写法：&lt;br&gt;&lt;strong&gt;这里是JSP标签，很多标签的写法是一致的&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;jsp:scriptle&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/jsp:scriptle&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;JSP指令&quot;&gt;&lt;a href=&quot;#JSP指令&quot; class=&quot;headerlink&quot; title=&quot;JSP指令&quot;&gt;&lt;/a&gt;JSP指令&lt;/h3&gt;&lt;p&gt;  JSP指令用来设置与整个JSP页面相关的属性，它并不直接产生任何可见的输出,而只是告诉引擎如何处理其余JSP页面。&lt;/p&gt;
&lt;p&gt;其一般语法形式为：  &amp;lt;%@ 指令名称 属性=”值” %&amp;gt;&lt;/p&gt;
&lt;p&gt;三种命令指令分别是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;page&lt;br&gt;&lt;strong&gt;设定整个JSP网页的静态属性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;include&lt;br&gt;&lt;strong&gt;include指令用来向当前页面插入一个静态文件的内容。这个文件可以是JSP、HTML、文本或是Java程序&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;taglib&lt;br&gt;&lt;strong&gt;使用标签库定义新的自定义标签，在JSP页面中启用定制行为&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;page-指令-（页面指令）&quot;&gt;&lt;a href=&quot;#page-指令-（页面指令）&quot; class=&quot;headerlink&quot; title=&quot;page 指令 （页面指令）&quot;&gt;&lt;/a&gt;page 指令 （页面指令）&lt;/h4&gt;&lt;p&gt;作用： 设定整个JSP网页的静态属性&lt;br&gt;语法：键值对，空格分割。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%@ page language=&amp;quot;java&amp;quot; contentType=&amp;quot;text/html; charset=utf-8&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pageEncoding=&amp;quot;utf-8&amp;quot;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;page指令属性&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;autoFlush&lt;/td&gt;
&lt;td&gt;满缓冲刷新，否异常 默认true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;buffer&lt;/td&gt;
&lt;td&gt;指定输出模式缓冲流，none 无，指定数值，大于此值，与上一起用，默认大于8kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;contentType&lt;/td&gt;
&lt;td&gt;定义字符编码和页面响应MIME类型：contentType=”text/html;charset=GBK”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;errorPage&lt;/td&gt;
&lt;td&gt;错误跳转页面errorPage=”error.jsp” 与isErrorPage同用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;extends&lt;/td&gt;
&lt;td&gt;定义JSP页面产生的Servlet 类的扩展， extends=””&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import&lt;/td&gt;
&lt;td&gt;import=”java.util.*”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;info&lt;/td&gt;
&lt;td&gt;此JSP信息 info=”info.exe”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isErrorPage&lt;/td&gt;
&lt;td&gt;设置true或false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isThreadSafe&lt;/td&gt;
&lt;td&gt;此页面是否是线程安全的，true，表示一个JSP页面可以处理多个用户，false， 一次只能处理一个用户。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;language&lt;/td&gt;
&lt;td&gt;用来定义使用的脚本语言, language=”java”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pageEncoding&lt;/td&gt;
&lt;td&gt;JSP页面的字节编码 pageEncoding=”utf-8”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;session&lt;/td&gt;
&lt;td&gt;指定所在页面是否参与HTTP对话，默认:true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;实例代码&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入ArrayList 和 StringTokenizer&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%@ page language=&amp;quot;java&amp;quot; contentType=&amp;quot;text/html; charset=utf-8&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pageEncoding=&amp;quot;utf-8&amp;quot;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%@ page import=&amp;quot;java.util.ArrayList,java.util.StringTokenizer;&amp;quot; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;include-（包含指令）&quot;&gt;&lt;a href=&quot;#include-（包含指令）&quot; class=&quot;headerlink&quot; title=&quot;include （包含指令）&quot;&gt;&lt;/a&gt;include （包含指令）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;包含指令的用法非常简单，因为它只有一个属性&lt;/strong&gt;&lt;br&gt;作用： include指令用来向当前页面插入一个静态文件的内容。这个文件可以是JSP、HTML、文本或是Java程序&lt;br&gt;语法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%@include file=&amp;quot;文件路径&amp;quot;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;br&gt;1、include 属于静态包含。（先包含后处理）&lt;br&gt;2、如果直接以文件名开头,指的是正在使用的JSP文件所在的路径,如果以/开头,指的是正在使用的JSP文件上下的路径关系(相对于WEB应用的根目录。)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;index.jsp 引入 home.jsp&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%@ include file=&amp;quot;home.jsp&amp;quot;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;taglib-（标签指令）&quot;&gt;&lt;a href=&quot;#taglib-（标签指令）&quot; class=&quot;headerlink&quot; title=&quot;taglib （标签指令）&quot;&gt;&lt;/a&gt;taglib （标签指令）&lt;/h4&gt;&lt;p&gt;当页面引用了用户自定义标签时，taglib指令用于引用自定义标签库，并指定标签的前缀。&lt;br&gt;JSP内置的标签，我们称为JSP标签。&lt;/p&gt;
&lt;p&gt;作用：使用标签库定义新的自定义标签，在JSP页面中启用定制行为。&lt;br&gt;语法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%@ taglib uri=&amp;quot;URIToTagLibrary&amp;quot; prefix=&amp;quot;tagPrefix&amp;quot; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;taglib 指令属性&lt;/strong&gt;&lt;br&gt;属性 | 说明&lt;br&gt;— | —&lt;br&gt;uri | 定位标签库描述符的位置。唯一标识和前缀相关的标签库描述符，可以使用绝对或相对URL。&lt;br&gt;tagDir | 指示前缀将被用于标识在WEV-INF/tags目录下的标签文件。&lt;br&gt;prefix | 标签的前缀，区分多个自定义标签。不可以使用保留前缀和空前缀，遵循XML命名空间的命名约定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入JSTL 标签库&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;taglib uri=&amp;quot;http://java.sun.com /jsp/jstl/core&amp;quot; prefix=&amp;quot;c&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;JSP-内置标签&quot;&gt;&lt;a href=&quot;#JSP-内置标签&quot; class=&quot;headerlink&quot; title=&quot;JSP 内置标签&quot;&gt;&lt;/a&gt;JSP 内置标签&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;JSP 一共有13个内置标签，他们用于完成不同的功能&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;暂略&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;静态包含和动态包含的区别&quot;&gt;&lt;a href=&quot;#静态包含和动态包含的区别&quot; class=&quot;headerlink&quot; title=&quot;静态包含和动态包含的区别&quot;&gt;&lt;/a&gt;静态包含和动态包含的区别&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;写法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;静态包含&lt;br&gt;静态包含就是使用包含指令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%@include file=&amp;quot;文件路径&amp;quot;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动态包含&lt;br&gt;使用JSP标签 &lt;jsp:include&gt;&lt;/jsp:include&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态包含&lt;br&gt;&lt;strong&gt;执行时间是在编译阶段执行，引入的内容为静态文件，在编译成servlet时就和包含者融合到一起,最后生成HTML&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;动态包含&lt;br&gt;&lt;strong&gt;执行时间是在请求阶段执行，引入的内容在执行页面时被请求时动态生成再包含到页面中。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;JSP-内置对象&quot;&gt;&lt;a href=&quot;#JSP-内置对象&quot; class=&quot;headerlink&quot; title=&quot;JSP 内置对象&quot;&gt;&lt;/a&gt;JSP 内置对象&lt;/h3&gt;&lt;h4 id=&quot;JSP-九种内置对象&quot;&gt;&lt;a href=&quot;#JSP-九种内置对象&quot; class=&quot;headerlink&quot; title=&quot;JSP 九种内置对象&quot;&gt;&lt;/a&gt;JSP 九种内置对象&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;JSP 内置九种内置对象，你并不需要使用include 去引入它&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;对象名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pageContext&lt;/td&gt;
&lt;td&gt;JSP的页面容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;request&lt;/td&gt;
&lt;td&gt;得到用户的请求信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;response&lt;/td&gt;
&lt;td&gt;服务器向用户的回应信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;session&lt;/td&gt;
&lt;td&gt;用来保存内一个用户信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application&lt;/td&gt;
&lt;td&gt;表示所有用户的共享信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;config&lt;/td&gt;
&lt;td&gt;服务器配置，可以去的初始值参数页面输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;out&lt;/td&gt;
&lt;td&gt;页面输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;page&lt;/td&gt;
&lt;td&gt;表示从页面中表示出来的一个Servlet实例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exception&lt;/td&gt;
&lt;td&gt;表示JSP页面所发生异常，在错误页面才起作用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;JSP-四种属性范围&quot;&gt;&lt;a href=&quot;#JSP-四种属性范围&quot; class=&quot;headerlink&quot; title=&quot;JSP 四种属性范围&quot;&gt;&lt;/a&gt;JSP 四种属性范围&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;这里涉及JSP页面请求的生命周期,  暂略&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;作用范围名称&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;page&lt;/td&gt;
&lt;td&gt;只在一个页面中保存属性，跳转之后无效。（使用pageContext表示）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;request&lt;/td&gt;
&lt;td&gt;再一次请求中保存属性，服务器跳转后依然有效。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;session&lt;/td&gt;
&lt;td&gt;再一次会话范围中保存，无论何种跳转都可以使用，但是新开浏览器无法使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application&lt;/td&gt;
&lt;td&gt;在整个服务器上保存，所有用户都可以使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;JSP-JavaBean&quot;&gt;&lt;a href=&quot;#JSP-JavaBean&quot; class=&quot;headerlink&quot; title=&quot;JSP JavaBean&quot;&gt;&lt;/a&gt;JSP JavaBean&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;JSP 使用使用JavaBean，除了可以使用&amp;lt;%User user = new User();%&amp;gt;的方式，大多数使用&lt;code&gt;&amp;lt;jsp:useBean&amp;gt;&lt;/code&gt;标签&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;写法&lt;br&gt;&lt;strong&gt;它会按照按名称完成自动匹配&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;jsp:useBean id=&amp;quot;实例化对象名称&amp;quot; scope=&amp;quot;保存范围&amp;quot; class=&amp;quot;包.类名称&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;jsp:setProperty name=&amp;quot;javabean对象&amp;quot; property=&amp;quot;*&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用参数 &lt;jsp:property&gt;&lt;/jsp:property&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;jsp:setProperty name=&amp;quot;id&amp;quot; property=&amp;quot;*&amp;quot;/&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;jsp:setProperty name=&amp;quot;id&amp;quot; property=&amp;quot;属性名称&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;jsp:setProperty name=&amp;quot;id&amp;quot; property=&amp;quot;属性名称&amp;quot; param=&amp;quot;参数名称&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;jsp:setProperty name=&amp;quot;id&amp;quot; property=&amp;quot;属性名称&amp;quot; param=&amp;quot;参数名称&amp;quot; value=&amp;quot;内容&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获得属性&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;jsp:getProperty name=&amp;quot;实例化对象名称&amp;quot; property=&amp;quot;属性名称&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaBean的保存范围&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;page &lt;/li&gt;
&lt;li&gt;request &lt;/li&gt;
&lt;li&gt;session &lt;/li&gt;
&lt;li&gt;application&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JavaBean删除&lt;br&gt;&lt;strong&gt;作用域范围.removeAttribute(JavaBean名称)，必须根据设置的范围删除&lt;/strong&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pageContext.removeAttribute(&amp;quot;javabean&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Servlet&quot;&gt;&lt;a href=&quot;#Servlet&quot; class=&quot;headerlink&quot; title=&quot;Servlet&quot;&gt;&lt;/a&gt;Servlet&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;这里简单总结&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Servlet-基础&quot;&gt;&lt;a href=&quot;#Servlet-基础&quot; class=&quot;headerlink&quot; title=&quot;Servlet 基础&quot;&gt;&lt;/a&gt;Servlet 基础&lt;/h3&gt;&lt;h4 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h4&gt;&lt;p&gt;Servlet 生命周期如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;加载 -&amp;gt; 初始化 -&amp;gt; 服务 -&amp;gt; 销毁 -&amp;gt; 卸载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;内置方法&quot;&gt;&lt;a href=&quot;#内置方法&quot; class=&quot;headerlink&quot; title=&quot;内置方法&quot;&gt;&lt;/a&gt;内置方法&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名称&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;init()&lt;/td&gt;
&lt;td&gt;Servlet初始化调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;init(ServletConfig)&lt;/td&gt;
&lt;td&gt;Servlet初始化调用，ServletConfig读取配置信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service()&lt;/td&gt;
&lt;td&gt;Servlet服务，一般不会直接覆写此方法，而是使用doGet()或doPost()方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;destroy()&lt;/td&gt;
&lt;td&gt;Servlet销毁时调用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;web-xml-配置Servlet，并附加初始值&quot;&gt;&lt;a href=&quot;#web-xml-配置Servlet，并附加初始值&quot; class=&quot;headerlink&quot; title=&quot;web.xml 配置Servlet，并附加初始值&quot;&gt;&lt;/a&gt;web.xml 配置Servlet，并附加初始值&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;servlet&amp;gt;                                         定义&amp;lt;servlet&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;servlet-name&amp;gt;xxxx&amp;lt;/servlet-name&amp;gt;             与servlet-mapping对应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;servlet-class&amp;gt;                               定义包.类名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    io.github.cmp-cc.xxxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/servlet-class&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;init-param&amp;gt;                                    配置参数，可配置多个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;param-name&amp;gt;ref&amp;lt;/param-name&amp;gt;                  参数名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;param-value&amp;gt;值&amp;lt;/param-value&amp;gt;                 参数内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/init-param&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;servlet-mapping&amp;gt;                                 映射路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;servlet-name&amp;gt;xxxx&amp;lt;/servlet-name&amp;gt;               与servlet相对应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;url-pattern&amp;gt;/xxx&amp;lt;/url-pattern&amp;gt;                 页面映射路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Servlet 获取初始值&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Congif.getinitParameter（&amp;quot;ref&amp;quot;）取出&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;获取HttpSession、ServletContext-实例&quot;&gt;&lt;a href=&quot;#获取HttpSession、ServletContext-实例&quot; class=&quot;headerlink&quot; title=&quot;获取HttpSession、ServletContext 实例&quot;&gt;&lt;/a&gt;获取HttpSession、ServletContext 实例&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;getSession（）              // 返回当前session&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getSession（boolean）       // 返回当前session，是否新建。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getServletContext（）       // 取得ServletContext对象&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;请求转发与重定向&quot;&gt;&lt;a href=&quot;#请求转发与重定向&quot; class=&quot;headerlink&quot; title=&quot;请求转发与重定向&quot;&gt;&lt;/a&gt;请求转发与重定向&lt;/h4&gt;&lt;h5 id=&quot;请求转发与重定向的区别&quot;&gt;&lt;a href=&quot;#请求转发与重定向的区别&quot; class=&quot;headerlink&quot; title=&quot;请求转发与重定向的区别&quot;&gt;&lt;/a&gt;请求转发与重定向的区别&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;请求转发&lt;br&gt;&lt;strong&gt;调用者与被调用者之间共享相同的request对象和response对象，他们属于同一个访问请求和响应过程，我们可以称之为&lt;code&gt;服务器跳转&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;重定向&lt;br&gt;&lt;strong&gt;调用者与被调用者,不共享属性和方法，等同于点击一个URL。 我们称之为&lt;code&gt;客户端跳转&lt;/code&gt;&lt;/strong&gt;&lt;h5 id=&quot;请求转发与重定向的用法&quot;&gt;&lt;a href=&quot;#请求转发与重定向的用法&quot; class=&quot;headerlink&quot; title=&quot;请求转发与重定向的用法&quot;&gt;&lt;/a&gt;请求转发与重定向的用法&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重定向（客户点跳转）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;response.sendRedirect（&amp;quot;success.jsp&amp;quot;）;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;请求转发（服务端跳转）&lt;br&gt;&lt;strong&gt;有两个方法用于请求转发&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;forward(req,res);        页面跳转    &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;request.getRequestDispatcher(&amp;quot;success.jsp&amp;quot;).forward(request,response);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;include(req.res)       页面包含&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;request.getRequestDispatcher(&amp;quot;main.jsp&amp;quot;).include(request, response);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;forward-和-include-区别&quot;&gt;&lt;a href=&quot;#forward-和-include-区别&quot; class=&quot;headerlink&quot; title=&quot;forward 和 include 区别&quot;&gt;&lt;/a&gt;forward 和 include 区别&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;forward方法是把请求的内容转发到另外的一个servlet.&lt;/li&gt;
&lt;li&gt;include是把另一个servlet处理过后的结果内容拿过来.&lt;h3 id=&quot;Servlet-过滤器&quot;&gt;&lt;a href=&quot;#Servlet-过滤器&quot; class=&quot;headerlink&quot; title=&quot;Servlet 过滤器&quot;&gt;&lt;/a&gt;Servlet 过滤器&lt;/h3&gt;Servlet 自定义过滤器需要两个步骤&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1、实现Filter接口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Filter 方法&lt;br&gt;方法名称 | 说明&lt;br&gt;— | —&lt;br&gt;init（FilterConfig）| 过滤器初始化&lt;br&gt;doFilter(req,res)  |  完成过滤操作，然后通过FilterChain传递&lt;br&gt;destroy() | 过滤器消亡，执行方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实例&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  private String encodeString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//初始化方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void init(FilterConfig filterConfig) throws ServletException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 获取Web.xml 中配置的属性值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  encodeString=filterConfig.getInitParameter(&amp;quot;encoding&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //filter 要实现的功能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void doFilter(ServletRequest request, ServletResponse response,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FilterChain chain) throws IOException, ServletException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.out.println(&amp;quot;begin&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 设置字符集&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  request.setCharacterEncoding(encodeString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //继续向下执行，如果还有其他filter继续调用其他filter，没有的话将消息发送给服务器或客户端&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  chain.doFilter(request, response);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.out.println(&amp;quot;end&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//Filter注销方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void destroy() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、配置Web.xml&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;filter&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;filter-name&amp;gt;encodeFilter&amp;lt;/filter-name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;filter-class&amp;gt;io.github.cmp-cc.filter.encodeFilter&amp;lt;/filter-class&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;filter-mapping&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;filter-name&amp;gt;encodeFilter&amp;lt;/filter-name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;url-pattern&amp;gt;*.jsp&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;url-pattern指定匹配模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Servlet-监听器&quot;&gt;&lt;a href=&quot;#Servlet-监听器&quot; class=&quot;headerlink&quot; title=&quot;Servlet 监听器&quot;&gt;&lt;/a&gt;Servlet 监听器&lt;/h3&gt;&lt;h4 id=&quot;监听器类型&quot;&gt;&lt;a href=&quot;#监听器类型&quot; class=&quot;headerlink&quot; title=&quot;监听器类型&quot;&gt;&lt;/a&gt;监听器类型&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;接口名称&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;application&lt;/td&gt;
&lt;td&gt;ServletContextListener&lt;/td&gt;
&lt;td&gt;上下文状态监听器：监听应用容器启动和消亡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application&lt;/td&gt;
&lt;td&gt;ServletContextAttributeListener&lt;/td&gt;
&lt;td&gt;上下文属性监听器：监听增删改变换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;session&lt;/td&gt;
&lt;td&gt;HttpSessionListener&lt;/td&gt;
&lt;td&gt;状态监听器： 监听一次会话（Session）启动和消亡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;session&lt;/td&gt;
&lt;td&gt;HttpSessionAttributeListener&lt;/td&gt;
&lt;td&gt;Session 属性监听：监听增删改变换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;session&lt;/td&gt;
&lt;td&gt;HttpSessionBindingListener&lt;/td&gt;
&lt;td&gt;Session 对象绑定监听：Session绑定对象触发和消亡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;request&lt;/td&gt;
&lt;td&gt;ServletRequestListener&lt;/td&gt;
&lt;td&gt;请求监听器：监听一个请求（Request）启动和消亡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;request&lt;/td&gt;
&lt;td&gt;ServletRequestAttributeListener&lt;/td&gt;
&lt;td&gt;Request 属性监听：监听增删改变换&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;监听器的方法&quot;&gt;&lt;a href=&quot;#监听器的方法&quot; class=&quot;headerlink&quot; title=&quot;监听器的方法&quot;&gt;&lt;/a&gt;监听器的方法&lt;/h4&gt;&lt;h5 id=&quot;application-监听&quot;&gt;&lt;a href=&quot;#application-监听&quot; class=&quot;headerlink&quot; title=&quot;application 监听&quot;&gt;&lt;/a&gt;application 监听&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;ServletContextListener &lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;contextInitialized(ServletContextEvent)&lt;/td&gt;
&lt;td&gt;容器启动时触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;contextDestroyed（ServletContextEvent）&lt;/td&gt;
&lt;td&gt;容器销毁时触发&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;ServletContextEvent&lt;ul&gt;
&lt;li&gt;getServletContext() 取得ServletContext对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;ServletContextAttributeListener &lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;attributeAdded（ServletContexArribute）&lt;/td&gt;
&lt;td&gt;增加属性触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;attributeRemoved(ServletContexArribute)&lt;/td&gt;
&lt;td&gt;删除属性触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;attributeReplaced(ServletContexArribute)&lt;/td&gt;
&lt;td&gt;替换属性(重复设置)时触发&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;ServletContexArribute &lt;ul&gt;
&lt;li&gt;getName()取得设置属性名称&lt;/li&gt;
&lt;li&gt;getValue()取得设置属性内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h5 id=&quot;session-监听&quot;&gt;&lt;a href=&quot;#session-监听&quot; class=&quot;headerlink&quot; title=&quot;session 监听&quot;&gt;&lt;/a&gt;session 监听&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;HttpSessionListener&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sessionCreated(HttpSessionEvent)&lt;/td&gt;
&lt;td&gt;session创建时调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sessionDestroyed(HttpSessionEvent)&lt;/td&gt;
&lt;td&gt;session销毁时调用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;HttpSessionAttributeListener&lt;ul&gt;
&lt;li&gt;getsession()取得当前session&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;HttpSessionAttributeListener&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;attributeAdded(HttpSessionBindingEvent)&lt;/td&gt;
&lt;td&gt;增加属性触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;attributeRemoved(HttpSessionBindingEvent)&lt;/td&gt;
&lt;td&gt;删除属性触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;attributeReplaced(HttpSessionBindingEvent)&lt;/td&gt;
&lt;td&gt;替换属性时触发&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;HttpSessionBindingListener&lt;ul&gt;
&lt;li&gt;getSession()取得session&lt;/li&gt;
&lt;li&gt;getName()取得属性名称&lt;/li&gt;
&lt;li&gt;getValue()取得属性的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;HttpSessionBindingListener &lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;valueBound(HttpSessionBindingEvent)&lt;/td&gt;
&lt;td&gt;绑定对象到session时触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;valueUnbound(HttpSessionBindingEvent)&lt;/td&gt;
&lt;td&gt;从session中移除对象时触发&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h5 id=&quot;request-监听&quot;&gt;&lt;a href=&quot;#request-监听&quot; class=&quot;headerlink&quot; title=&quot;request 监听&quot;&gt;&lt;/a&gt;request 监听&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;ServletRequestListener&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;requestInitialized(ServletRequestEvent)&lt;/td&gt;
&lt;td&gt;请求开始时调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;requestDestroyed(ServletRequestEvent)&lt;/td&gt;
&lt;td&gt;请求结束时调用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;ServletRequestEvent&lt;ul&gt;
&lt;li&gt;getServletRequest() 取得ServletRequest对象&lt;/li&gt;
&lt;li&gt;getServletContext()取得ServletContext对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;ServletRequestAttributeListener&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;attributeAdded(ServletRequestAttributeEvent)&lt;/td&gt;
&lt;td&gt;增加属性触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;attributeRemoved(ServletRequestAttributeEvent)&lt;/td&gt;
&lt;td&gt;删除属性触发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;attributeReplaced(ServletRequestAttributeEvent)&lt;/td&gt;
&lt;td&gt;替换属性(重复设置)时触发&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;ServletRequestAttributeEvent&lt;ul&gt;
&lt;li&gt;getName()         取得属性名称&lt;/li&gt;
&lt;li&gt;getValue()         取得属性的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&quot;监听器实例&quot;&gt;&lt;a href=&quot;#监听器实例&quot; class=&quot;headerlink&quot; title=&quot;监听器实例&quot;&gt;&lt;/a&gt;监听器实例&lt;/h4&gt;&lt;h4 id=&quot;web-xml-配置监听器&quot;&gt;&lt;a href=&quot;#web-xml-配置监听器&quot; class=&quot;headerlink&quot; title=&quot;web.xml 配置监听器&quot;&gt;&lt;/a&gt;web.xml 配置监听器&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;如此简单&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;listener&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;listener-class&amp;gt;io.github.cmp-cc.listener.RquestCountListener&amp;lt;/listener-class&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/listener&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;EL-表达式&quot;&gt;&lt;a href=&quot;#EL-表达式&quot; class=&quot;headerlink&quot; title=&quot;EL 表达式&quot;&gt;&lt;/a&gt;EL 表达式&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;EL表达式可以理解为是JSP的一部分，把EL表达式单独拎出来，说是因为，它只是提供了一种更加简写操作内置对象的一种方式，就简单的总结一下。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;语法结构&quot;&gt;&lt;a href=&quot;#语法结构&quot; class=&quot;headerlink&quot; title=&quot;语法结构&quot;&gt;&lt;/a&gt;语法结构&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&amp;#123;expression&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;与-运算符&quot;&gt;&lt;a href=&quot;#与-运算符&quot; class=&quot;headerlink&quot; title=&quot;.与  []  运算符&quot;&gt;&lt;/a&gt;&lt;code&gt;.&lt;/code&gt;与  &lt;code&gt;[]&lt;/code&gt;  运算符&lt;/h3&gt;&lt;p&gt;这两个运算符都是用于取值操作，可能你已经习惯如果取值方式,他更符合你的编程习惯。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&amp;#123;sessionScope.user.username&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是，要取值的key 为 $-3，怎么办?  ，你就需要使用&lt;code&gt;[]&lt;/code&gt; 运算符&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&amp;#123;sessionScope.user[$-3]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$&amp;#123;sessionScope.user.$-3&amp;#125;   // 这是会报错的。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你想忘掉&lt;code&gt;.&lt;/code&gt;的方式也是可行的。&lt;/p&gt;
&lt;h3 id=&quot;EL表达式隐式对象&quot;&gt;&lt;a href=&quot;#EL表达式隐式对象&quot; class=&quot;headerlink&quot; title=&quot;EL表达式隐式对象&quot;&gt;&lt;/a&gt;EL表达式隐式对象&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;EL表达式有十一个隐式对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四大作用域对象&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;对象名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pageScope&lt;/td&gt;
&lt;td&gt;将页面范围的变量名称映射到其值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;requestScope&lt;/td&gt;
&lt;td&gt;将请求范围的变量名称映射到其值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sessionScope&lt;/td&gt;
&lt;td&gt;将会话范围的变量名称映射到其值。该对象允许访问会话对象的属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;applicationScope&lt;/td&gt;
&lt;td&gt;将应用程序范围的变量名称映射到其值。该隐式对象允许访问应用程序范围的对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;一个上下文对象&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;对象名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pageContext&lt;/td&gt;
&lt;td&gt;javax.servlet.jsp.PageContext对象 将页面范围的变量名称映射到其值。用于访问 JSP 隐式对象，如请求、响应、会话、输出、servletContext&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;其他六个不同作用的隐式对象&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;对象名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;param&lt;/td&gt;
&lt;td&gt;接收传递到本页面的参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;paramValues&lt;/td&gt;
&lt;td&gt;接收传递到本页面的一组参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;取得一个头信息数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;headerValues&lt;/td&gt;
&lt;td&gt;取出一组头信息数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cookie&lt;/td&gt;
&lt;td&gt;取出cookie中的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;initParam&lt;/td&gt;
&lt;td&gt;将上下文初始化参数名称映射到单个值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;操作符&quot;&gt;&lt;a href=&quot;#操作符&quot; class=&quot;headerlink&quot; title=&quot;操作符&quot;&gt;&lt;/a&gt;操作符&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;术语&lt;/th&gt;
&lt;th&gt;定义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;算术&lt;/td&gt;
&lt;td&gt;+、- 、*、/、div、%、mod、–&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逻辑&lt;/td&gt;
&lt;td&gt;and、&amp;amp;&amp;amp;、or、ll、!、not&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;关系&lt;/td&gt;
&lt;td&gt;==、eq、!=、ne、lt、gt、&amp;lt;=、le、&amp;gt;=、ge&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;空&lt;/td&gt;
&lt;td&gt;empty &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三目（条件）&lt;/td&gt;
&lt;td&gt;A ?B :C&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;理解EL表达式的查找属性的顺序&quot;&gt;&lt;a href=&quot;#理解EL表达式的查找属性的顺序&quot; class=&quot;headerlink&quot; title=&quot;理解EL表达式的查找属性的顺序&quot;&gt;&lt;/a&gt;理解EL表达式的查找属性的顺序&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;你可以通过如下进行属性查找：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&amp;#123;username&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为没有指定哪一个范围的username，所以它会依序从Page -&amp;gt; Request -&amp;gt; Session -&amp;gt; Application范围查找,没有找到返回null。&lt;/p&gt;
&lt;h3 id=&quot;EL-其他&quot;&gt;&lt;a href=&quot;#EL-其他&quot; class=&quot;headerlink&quot; title=&quot;EL 其他&quot;&gt;&lt;/a&gt;EL 其他&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;接受请求参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单个参数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&amp;#123;param.red&amp;#125;     等价于      &amp;lt;%=request.getparameter(&amp;quot;red&amp;quot;)%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一组参数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&amp;#123;paramValues.参数名称&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$&amp;#123;paramValues.inst[0]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理集合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List   使用&lt;code&gt;${all[0]}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Map  使用&lt;code&gt;${all[&amp;quot;key&amp;quot;]}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Javabean 使用 &lt;code&gt;${all.名称}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;总结下一JSP/Servlet3.0，记性不好，记录一下，容易反查。&lt;/p&gt;
&lt;h2 id=&quot;JSP&quot;&gt;&lt;a href=&quot;#JSP&quot; class=&quot;headerlink&quot; title=&quot;JSP&quot;&gt;&lt;/a&gt;JSP&lt;/h2&gt;&lt;h3 id=&quot;JSP-注释&quot;&gt;&lt;a href=&quot;#J
    
    </summary>
    
      <category term="Java Web" scheme="http://cmp-cc.github.io/categories/Java-Web/"/>
    
    
      <category term="JSP/Servlet" scheme="http://cmp-cc.github.io/tags/JSP-Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="http://cmp-cc.github.io/2013/02/16/Ajax/"/>
    <id>http://cmp-cc.github.io/2013/02/16/Ajax/</id>
    <published>2013-02-16T05:43:00.000Z</published>
    <updated>2016-04-11T07:54:28.117Z</updated>
    
    <content type="html">&lt;h2 id=&quot;略略略&quot;&gt;&lt;a href=&quot;#略略略&quot; class=&quot;headerlink&quot; title=&quot;略略略&quot;&gt;&lt;/a&gt;略略略&lt;/h2&gt;&lt;p&gt;随便记录一下。 日后再补充。&lt;/p&gt;
&lt;h2 id=&quot;XMLHttpRequest-对象&quot;&gt;&lt;a href=&quot;#XMLHttpRequest-对象&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest 对象&quot;&gt;&lt;/a&gt;XMLHttpRequest 对象&lt;/h2&gt;&lt;h3 id=&quot;XMLHttpRequest-对象属性&quot;&gt;&lt;a href=&quot;#XMLHttpRequest-对象属性&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest 对象属性&quot;&gt;&lt;/a&gt;XMLHttpRequest 对象属性&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名称&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;onreadystatechange&lt;/td&gt;
&lt;td&gt;指定当readState状态改变时使用的操作，一般用于指定具体的回调函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;readyState&lt;/td&gt;
&lt;td&gt;返回当前请求的状态，只读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;responseBody&lt;/td&gt;
&lt;td&gt;将回应信息正文以unsigned byte数组的形式返回，只读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;responseStream&lt;/td&gt;
&lt;td&gt;以Ado Stream对象的形式返回响应信息，只读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;responseText&lt;/td&gt;
&lt;td&gt;接收以文本返回的数据，只读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;responseXML&lt;/td&gt;
&lt;td&gt;接收以XML文档形式回应的数据，只读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;status&lt;/td&gt;
&lt;td&gt;返回当前请求的http状态码，只读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;statusText&lt;/td&gt;
&lt;td&gt;返回当前请求的响应行装填，只读&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;statusText 的五种取值状体&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;状体码&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;请求没有发出（在调用open()函数之前）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;请求已经建立但还没有发出（在调用send()函数之前）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;请求已经发出正在处理之中(这里通常可以从响应得到内容头部)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;请求已经处理，正在接受服务器的信息，响应中通常有部分数据可用，但是服务器还有完成响应    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;请求已完成，可以访问服务器响应并使用它&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;XMLHttpRequest-对象方法&quot;&gt;&lt;a href=&quot;#XMLHttpRequest-对象方法&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest 对象方法&quot;&gt;&lt;/a&gt;XMLHttpRequest 对象方法&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名称&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;abort()&lt;/td&gt;
&lt;td&gt;取消当前所发出的请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getAllRespnseHeaders()&lt;/td&gt;
&lt;td&gt;取得所有的HTTP头信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getResponseHeader()&lt;/td&gt;
&lt;td&gt;取得一个指定的HTTP头信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;open()&lt;/td&gt;
&lt;td&gt;创建一个HTTP请求，并指定请求模式，如GET请求或POST请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;send()&lt;/td&gt;
&lt;td&gt;将创建的请求发送到服务器，并接受回应信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setRequestHeader()&lt;/td&gt;
&lt;td&gt;设置一个指定的请求的HTTP头信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;Ajax-实例&quot;&gt;&lt;a href=&quot;#Ajax-实例&quot; class=&quot;headerlink&quot; title=&quot;Ajax 实例&quot;&gt;&lt;/a&gt;Ajax 实例&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type = &amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var getAjax; // 欲初始化ajax函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function invidate() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (window.XMLHttpRequest) &amp;#123; // 判断浏览器类型， N 为IE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		getAjax = new XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		getAjax = new ActiveXObject(&amp;quot;Misrosoft.XMLHTTP&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function useGetAjax() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	invidate(); // 初始化XMLHttpRequest对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	getAjax.open(&amp;quot;POST&amp;quot;, &amp;quot;testAJax&amp;quot;, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 以POST方式发开请求连接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	getAjax.setRequestHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/x-www-form-urlencoded&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	getAjax.onreadystatechange = function() &amp;#123; // 回调函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (getAjax.readyState == 4) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    if (getAjax.status == 200) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        var text = getAjax.responseText; // 接收响应信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        alert(text);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		        document.getElementById(&amp;quot;ajax&amp;quot;).innerHTML = text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getAjax.send(&amp;quot;username=1&amp;quot;); // 发送请求体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;略略略&quot;&gt;&lt;a href=&quot;#略略略&quot; class=&quot;headerlink&quot; title=&quot;略略略&quot;&gt;&lt;/a&gt;略略略&lt;/h2&gt;&lt;p&gt;随便记录一下。 日后再补充。&lt;/p&gt;
&lt;h2 id=&quot;XMLHttpRequest-对象&quot;&gt;&lt;a href=&quot;#XMLHttpReq
    
    </summary>
    
      <category term="Web" scheme="http://cmp-cc.github.io/categories/Web/"/>
    
    
      <category term="Javascript" scheme="http://cmp-cc.github.io/tags/Javascript/"/>
    
  </entry>
  
</feed>
