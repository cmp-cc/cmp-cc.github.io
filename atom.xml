<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I am cmp-cc</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cmp-cc.github.io/"/>
  <updated>2016-04-06T08:49:38.964Z</updated>
  <id>http://cmp-cc.github.io/</id>
  
  <author>
    <name>cmp-cc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://cmp-cc.github.io/2015/08/14/hello-world/"/>
    <id>http://cmp-cc.github.io/2015/08/14/hello-world/</id>
    <published>2015-08-14T08:53:00.000Z</published>
    <updated>2016-04-06T08:49:38.964Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="博客" scheme="http://cmp-cc.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Blog" scheme="http://cmp-cc.github.io/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://cmp-cc.github.io/tags/Hexo/"/>
    
      <category term="Markdown" scheme="http://cmp-cc.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop日常实战 计数器</title>
    <link href="http://cmp-cc.github.io/2014/12/16/Hadoop%E6%97%A5%E5%B8%B8%E5%AE%9E%E6%88%98%20%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    <id>http://cmp-cc.github.io/2014/12/16/Hadoop日常实战 计数器/</id>
    <published>2014-12-16T09:26:00.000Z</published>
    <updated>2016-04-08T11:51:45.958Z</updated>
    
    <content type="html">&lt;p&gt;计数器是一种收集作业统计信息的有效有段&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;在一般情况下，我很需要了解一下Mapreduce 的运行情况，运行的过程是不可见，程序运行成功，但我们不能保证数据是正确的。我们需要质量控制、应用级统计。计数器可以辅助诊断系统故障，检测某一事件是否发生。计数特定属性、方法、异常。然后进一步分析程序数据的正确性。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;内置计数器控制台视图&quot;&gt;&lt;a href=&quot;#内置计数器控制台视图&quot; class=&quot;headerlink&quot; title=&quot;内置计数器控制台视图&quot;&gt;&lt;/a&gt;内置计数器控制台视图&lt;/h2&gt;&lt;p&gt;Hadoop 中的内置计数器，用于帮助你分析Mapreduce执行程序的具体状体。&lt;/p&gt;
&lt;p&gt;如下是&lt;code&gt;Hadoop 2.0.0-cdh4.7.0&lt;/code&gt; Hadoop Mapreudce执行程序控制台显示&lt;/p&gt;
&lt;img src=&quot;/2014/12/16/Hadoop日常实战%20计数器/QQ图片20141211110508.png&quot; alt=&quot;内置计数器&quot; title=&quot;内置计数器&quot;&gt;
&lt;p&gt; &lt;strong&gt;Counter有组（group）的概念，用于表示逻辑上相同范围的所有数值。&lt;/strong&gt;&lt;br&gt;上图默认输出Counter分为三个组，从中我们可以分析出程序运行使用 CPU、内存、IO读写、网络流量的一个基本情况 &lt;/p&gt;
&lt;p&gt;文章推荐: &lt;a href=&quot;http://www.cnblogs.com/ggjucheng/archive/2013/05/08/3065220.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/ggjucheng/archive/2013/05/08/3065220.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;内置计数器的分类：&quot;&gt;&lt;a href=&quot;#内置计数器的分类：&quot; class=&quot;headerlink&quot; title=&quot;内置计数器的分类：&quot;&gt;&lt;/a&gt;内置计数器的分类：&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分组&lt;/th&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mapreduce任务计数器&lt;/td&gt;
&lt;td&gt;org.apache.hadoop.mapreduce. TaskCounter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;任务计数器&lt;/td&gt;
&lt;td&gt;org.apache.hadoop.mapreduce. JobCounter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文件系统计数器&lt;/td&gt;
&lt;td&gt;org.apache.hadoop.mapreduce.FileSystemCounter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输入文件计数器&lt;/td&gt;
&lt;td&gt;org.apache.hadoop.mapreduce.lib.input. FileInputFormatCounter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输出文件计数器&lt;/td&gt;
&lt;td&gt;org.apache.hadoop.mapreduce.lib.output. FileOutputFormatCounter&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;这些就是hadoop 内置的计数器类（组），均是枚举类型。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;静态计数器和动态计数器&quot;&gt;&lt;a href=&quot;#静态计数器和动态计数器&quot; class=&quot;headerlink&quot; title=&quot;静态计数器和动态计数器&quot;&gt;&lt;/a&gt;静态计数器和动态计数器&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;静态计数器&lt;br&gt;&lt;strong&gt;定义一个枚举(enum) 枚举的名称即使Counter组的名称。 枚举属性即使要记录的数值名称，Mapreduce框架将跨所有map和reduce聚集这些计数器，并在作业结束时产生一个结果。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static enum ReporInfo&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 统计map端读取数据是否按预期。 MISSING输出为0，表示没有输入数据完整或无缺损。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MISSING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//通过Mapper中的context对象进行计数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.getCounter(Temperature.MISSING).increment(1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动态计数器&lt;br&gt;&lt;strong&gt;动态计数器使用更加简单,你需要指定两个变量，这个变量均是动态指定。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 组的名称  和  动态计数的字段名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.getCounter(&amp;quot;group name&amp;quot;,&amp;quot;dynamic args&amp;quot;).increment(1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;比较&lt;br&gt;&lt;strong&gt;静态类型： 先将java枚举类型转换成String类型，再通过RPC发送计数器，两种创建和访问计数器方法(枚举类型和String类型) 实际是等价的。&lt;br&gt;相比之下，枚举类型易于使用，还提供类型安全，使用与大多数作业，特定场合使用动态计数器。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;通过计数器获取Mapreduce的运行情况&quot;&gt;&lt;a href=&quot;#通过计数器获取Mapreduce的运行情况&quot; class=&quot;headerlink&quot; title=&quot;通过计数器获取Mapreduce的运行情况&quot;&gt;&lt;/a&gt;通过计数器获取Mapreduce的运行情况&lt;/h2&gt;&lt;p&gt;获取计数器：  作业长时间运行，我们需要通过计数器了解运行情况。我们只需要写一个监听类就可以。&lt;br&gt;如下是Mapreduce2.0写法，同样需要引用1.0中的JobClient类。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String jobID = args[0];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JobClient jobClient = new JobClient(new JobConf(getConf()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RunningJob job = jobClient.getJob(JobID.forName(jobID));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Counters counters = job.getCounters();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long missing = counters.getCounter(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MaxTemperatureWithCounters.Temperature.MISSING);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long total = counters.getCounter(Task.Counter.MAP_INPUT_RECORDS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.printf(&amp;quot;Records with missing temperature fields: %.2f%%\n&amp;quot;,100.0 * missing / total);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;计数器原理&quot;&gt;&lt;a href=&quot;#计数器原理&quot; class=&quot;headerlink&quot; title=&quot;计数器原理&quot;&gt;&lt;/a&gt;计数器原理&lt;/h2&gt;&lt;img src=&quot;/2014/12/16/Hadoop日常实战%20计数器/c5c20a58-0087-49b2-a5d5-91ca4ae38066.jpg&quot; alt=&quot;计数器原理图&quot; title=&quot;计数器原理图&quot;&gt;
&lt;ul&gt;
&lt;li&gt;计数器实质是由JobTracker维护，计数器值会定期传到tasktracker，在由tasktracker传递给jobtracker。也就是说所有的计数器信息都是存在jobTracker的内存中，计数器序列化并状态更新同步到JobTracker。&lt;/li&gt;
&lt;li&gt;TaskTracker中累加计数器 记录单节点中的计数个数。通过“心跳“ 传递信息给JobTracker。&lt;/li&gt;
&lt;li&gt;JobTracker会下运行结束之前最终汇总时剔除掉失败任务计数器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mapreduce1.0中并没有限制计数器的个数，极其影响程序性能。&lt;br&gt;为了不对JobTracker产生印象。计数器数目应当控制到100以下。&lt;/p&gt;
&lt;p&gt;如果你的计数器超过了120个就会报如下错误：&lt;br&gt;org.apache.hadoop.mapreduce.counters.LimitExceededException: Too many counters: 121 max=120&lt;/p&gt;
&lt;h2 id=&quot;异常处理&quot;&gt;&lt;a href=&quot;#异常处理&quot; class=&quot;headerlink&quot; title=&quot;异常处理&quot;&gt;&lt;/a&gt;异常处理&lt;/h2&gt;&lt;p&gt;你可能遇到如下异常&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;14/12/12 09:56:48 INFO mapred.JobClient: Task Id : attempt_201412091419_0236_m_000028_0, Status : FAILED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Error: Found interface org.apache.hadoop.mapreduce.Counter, but class was expected&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原因：&lt;br&gt;&lt;strong&gt;你本地的使用的编译环境是Hadoop1.0(MR1) 而你的集群环境为hadoop2.0(MR2) 所以默认没有找到。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;解决方案&lt;br&gt;更改为hadoop2.0(hadoop-mapreduce-client-core-2.0.0-cdh4.7.0.jar，hadoop-common-2.0.0-cdh4.7.0.jar)的jar。和集群环境保持一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;推荐Blog：&lt;br&gt;&lt;a href=&quot;http://langyu.iteye.com/blog/1171091&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://langyu.iteye.com/blog/1171091&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;计数器是一种收集作业统计信息的有效有段&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;在一般情况下，我很需要了解一下Mapreduce 的运行情况，运行的过程是不可见，程序运行成功，但我们不能保证数据是正确的。我们需要质量控制、应用级统计。计数器可以辅助诊断系统故障，检测某一事件是否发
    
    </summary>
    
      <category term="大数据开发" scheme="http://cmp-cc.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Hadoop" scheme="http://cmp-cc.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 语义化标签</title>
    <link href="http://cmp-cc.github.io/2014/01/03/HTML5%20%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/"/>
    <id>http://cmp-cc.github.io/2014/01/03/HTML5 语义化标签/</id>
    <published>2014-01-03T08:43:00.000Z</published>
    <updated>2016-04-08T08:23:52.427Z</updated>
    
    <content type="html">&lt;p&gt;前段时间看了一本《HTML5 实战》 ，也只是为了关注一下HTML5的发展和趋势。&lt;/p&gt;
&lt;p&gt;看的我头大，这本书只是做个了HTML5的介绍，算不上实战，很多例子含糊不清。&lt;/p&gt;
&lt;p&gt;HTML5 中新的语义化标签，还是让我眼前一亮。&lt;/p&gt;
&lt;h2 id=&quot;HTML5-中的新特性&quot;&gt;&lt;a href=&quot;#HTML5-中的新特性&quot; class=&quot;headerlink&quot; title=&quot;HTML5 中的新特性&quot;&gt;&lt;/a&gt;HTML5 中的新特性&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;HTML5 中的核心特性，先记录一下,方便日后查阅&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新的语义化标签&lt;/li&gt;
&lt;li&gt;表单与表单API&lt;/li&gt;
&lt;li&gt;Canvas API&lt;/li&gt;
&lt;li&gt;拖放 API&lt;/li&gt;
&lt;li&gt;地理位置 API&lt;/li&gt;
&lt;li&gt;WEB存储 API&lt;/li&gt;
&lt;li&gt;IndexedDB API&lt;/li&gt;
&lt;li&gt;文件&lt;/li&gt;
&lt;li&gt;通信API&lt;/li&gt;
&lt;li&gt;WEB workers API&lt;/li&gt;
&lt;li&gt;历史 API&lt;/li&gt;
&lt;li&gt;脱机 API&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;HTML5-语义化标签&quot;&gt;&lt;a href=&quot;#HTML5-语义化标签&quot; class=&quot;headerlink&quot; title=&quot;HTML5 语义化标签&quot;&gt;&lt;/a&gt;HTML5 语义化标签&lt;/h2&gt;&lt;h3 id=&quot;HTML-结构语义&quot;&gt;&lt;a href=&quot;#HTML-结构语义&quot; class=&quot;headerlink&quot; title=&quot;HTML 结构语义&quot;&gt;&lt;/a&gt;HTML 结构语义&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;HTML 整体结构所需的标签语义&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标签&lt;/th&gt;
&lt;th&gt;语义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;这个元素表示一组介绍性的内容，适用于文档的不同节，他既可以包含节标题，也可以包含索引、搜索表单、logo等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nav&lt;/td&gt;
&lt;td&gt;这个元素表示包含导航链接的节，如菜单或索引，并非所有的网页链接都要加&lt;nav&gt;元素中，只有主要的导航块才需要加到元素中。&lt;/nav&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;section&lt;/td&gt;
&lt;td&gt;这个元素表示文档中的普通的节，通常，它可用于创建多个内容块（如：列） 从而对具有特定主题的内容进行分组，如图书的章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aside&lt;/td&gt;
&lt;td&gt;这个元素表示与内容相关但不属于它的内容，如：引用，边侧栏，广告&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;footer&lt;/td&gt;
&lt;td&gt;这个元素表示与父级元素相关的额外信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;article&lt;/td&gt;
&lt;td&gt;这个元素表示重要信息的独立部分–例如，报纸上或博客中的文章，&lt;article&gt;可以嵌套，也可以用于在相关项列表中显示一个&lt;/article&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hgroup&lt;/td&gt;
&lt;td&gt;如果有多级标题，请使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;figure&lt;/td&gt;
&lt;td&gt;这个元素表示主内容引用内容独立部分(图像，图表，视频)，这个信息可以从主内容删除，而不会影响其常规流。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;figcaption&lt;/td&gt;
&lt;td&gt;这个元素可以用于显示表题，或者与figure 一起用，例如： 图形的描述信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mark&lt;/td&gt;
&lt;td&gt;这个元素可以突出显示特殊情况下的重要文字，或者是对应的用户输入。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;small&lt;/td&gt;
&lt;td&gt;这个元素表示边侧评论，如附属细则(负责声明，法律限制，版权)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cite&lt;/td&gt;
&lt;td&gt;这个元素可以用于显示作品标题(图书、电影、诗歌)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;address&lt;/td&gt;
&lt;td&gt;显示article或者整个文档的合同信息，且应该位于footer中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;显示人和机器可读的日期和时间。 datetime属性，pubdate表示出版日期&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;HTML-文档语义&quot;&gt;&lt;a href=&quot;#HTML-文档语义&quot; class=&quot;headerlink&quot; title=&quot;HTML 文档语义&quot;&gt;&lt;/a&gt;HTML 文档语义&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;HTML 作用于文本标签语义&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标签&lt;/th&gt;
&lt;th&gt;语义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;定义日期或时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;em&lt;/td&gt;
&lt;td&gt;强调&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strong&lt;/td&gt;
&lt;td&gt;重要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;small&lt;/td&gt;
&lt;td&gt;旁注&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cite&lt;/td&gt;
&lt;td&gt;作品引用 （标题）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;td&gt;引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dfn&lt;/td&gt;
&lt;td&gt;举例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;abbr&lt;/td&gt;
&lt;td&gt;缩写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;code&lt;/td&gt;
&lt;td&gt;计算机代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;var&lt;/td&gt;
&lt;td&gt;变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;samp&lt;/td&gt;
&lt;td&gt;计算机输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kbd&lt;/td&gt;
&lt;td&gt;用户输入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sub&lt;/td&gt;
&lt;td&gt;下标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sup&lt;/td&gt;
&lt;td&gt;上标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;备选项 大部分用于发言、技术短语等情况。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;关键字 表示在不增加额外重要性的同时将词或短语高亮显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mart&lt;/td&gt;
&lt;td&gt;高亮&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ruby、rb、rt、rp&lt;/td&gt;
&lt;td&gt;注释 [一种排版注释系统(位于横排文本上方的简短文字)]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bdi&lt;/td&gt;
&lt;td&gt;文本方向间离&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bdo&lt;/td&gt;
&lt;td&gt;文本方向格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;span&lt;/td&gt;
&lt;td&gt;其他&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;br&lt;/td&gt;
&lt;td&gt;换行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wbr&lt;/td&gt;
&lt;td&gt;可选折行 [长单词的破择号 (让浏览器决定是否换行)]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h1 ~ h6&lt;/td&gt;
&lt;td&gt;一级标题 至 六级标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;figure、figcaption&lt;/td&gt;
&lt;td&gt;figure 独立的流（图片、图像、图表）figcaption 标题&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间看了一本《HTML5 实战》 ，也只是为了关注一下HTML5的发展和趋势。&lt;/p&gt;
&lt;p&gt;看的我头大，这本书只是做个了HTML5的介绍，算不上实战，很多例子含糊不清。&lt;/p&gt;
&lt;p&gt;HTML5 中新的语义化标签，还是让我眼前一亮。&lt;/p&gt;
&lt;h2 id=&quot;HTML5
    
    </summary>
    
      <category term="Web" scheme="http://cmp-cc.github.io/categories/Web/"/>
    
    
      <category term="HTML5" scheme="http://cmp-cc.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>贫血模型和充血模型</title>
    <link href="http://cmp-cc.github.io/2013/12/14/%E8%B4%AB%E8%A1%80%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%85%85%E8%A1%80%E6%A8%A1%E5%9E%8B/"/>
    <id>http://cmp-cc.github.io/2013/12/14/贫血模型和充血模型/</id>
    <published>2013-12-14T08:53:00.000Z</published>
    <updated>2016-04-07T06:24:53.828Z</updated>
    
    <content type="html">&lt;p&gt;大多数情况下，我忍不住赋予Model行为，我并不知道它是否合理，了解一下领域模型中的贫血模型和充血模型，无意中发现还有胀血模型和失血模型。 如下是自己（cmp-cc）的理解：&lt;/p&gt;
&lt;h2 id=&quot;模型-（Model）&quot;&gt;&lt;a href=&quot;#模型-（Model）&quot; class=&quot;headerlink&quot; title=&quot;模型 （Model）&quot;&gt;&lt;/a&gt;模型 （Model）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;无论是贫血模型还是充血模型，他们都符合POJO （也可以认为JavaBean）。&lt;br&gt;&lt;strong&gt;Model包含属性的&lt;code&gt;get&lt;/code&gt;、&lt;code&gt;set&lt;/code&gt;方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;模型的本质充当数据容器（保存状态，传递状态）。&lt;br&gt;&lt;strong&gt;模型是一种特殊的数据结构&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;失血模型&quot;&gt;&lt;a href=&quot;#失血模型&quot; class=&quot;headerlink&quot; title=&quot;失血模型&quot;&gt;&lt;/a&gt;失血模型&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;失血模型就是POJO对象，模型仅仅包含数据的定义和getter/setter方法，业务逻辑和应用逻辑都放到服务层（Service）中。&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;层次表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UI(视图层) -&amp;gt; Control(控制层) -&amp;gt; Service（服务层） -&amp;gt; DAO （持久化层） -&amp;gt;domain object （领域对象 Model ）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;领域对象不具备任何行为（仅仅是一个POJO对象），所有的行为都在Service层。&lt;/li&gt;
&lt;li&gt;领域对象的作用。&lt;ul&gt;
&lt;li&gt;充当数据容器。&lt;/li&gt;
&lt;li&gt;对象关系映射（ORM）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这种模型很容易理解和掌握。&lt;/li&gt;
&lt;li&gt;优点&lt;ul&gt;
&lt;li&gt;层次结构清晰，单项依赖，易于维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点&lt;ul&gt;
&lt;li&gt;Service 层挤压严重。（业务逻辑职责） &lt;/li&gt;
&lt;li&gt;部分与数据操作相关的行为，必须通过Service层进行修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;贫血模型&quot;&gt;&lt;a href=&quot;#贫血模型&quot; class=&quot;headerlink&quot; title=&quot;贫血模型&quot;&gt;&lt;/a&gt;贫血模型&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;贫血模型中包含了一些业务逻辑，但不包含依赖持久层的业务逻辑。这部分依赖于持久层的业务逻辑将会放到服务层中。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;层次表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UI(视图层) -&amp;gt; Control(控制层) -&amp;gt; Service（服务层） -&amp;gt; DAO （持久化层） -&amp;gt;domain object （Model）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;继承失血模型特性&lt;/li&gt;
&lt;li&gt;领域对象具备简单行为，如下特点。&lt;ul&gt;
&lt;li&gt;行为不具备持久化特性。（不与数据库打交道，也就是不依赖于DAO层）&lt;/li&gt;
&lt;li&gt;具备与数据相关的业务行为。（部分Service行为 移至 Model）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同样与失血模型同样的痛处&lt;ul&gt;
&lt;li&gt;系统越复杂，维护成本越高，Service层（业务逻辑）挤压严重。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;充血模型&quot;&gt;&lt;a href=&quot;#充血模型&quot; class=&quot;headerlink&quot; title=&quot;充血模型&quot;&gt;&lt;/a&gt;充血模型&lt;/h2&gt;&lt;p&gt;**充血模型中包含了所有的业务逻辑，包括依赖于持久层的业务逻辑。所以，使用充血模型的领域层是依赖于持久层。&lt;/p&gt;
&lt;p&gt;层次表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UI -&amp;gt; Control -&amp;gt; Service -&amp;gt; domain object &amp;lt;–&amp;gt; DAO&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Service 层被减轻，不和DAO打交道，只包含业务逻辑。&lt;/li&gt;
&lt;li&gt;领域对象 和 DAO 双向依赖。&lt;/li&gt;
&lt;li&gt;优点&lt;ul&gt;
&lt;li&gt;减轻了Service层。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点&lt;ul&gt;
&lt;li&gt;Service 将直接依赖于领域对象。 领域对象同样具备部分业务，可能会造成职责混乱，或者使领域对象不具备业务I行为&lt;/li&gt;
&lt;li&gt;领域对象与DAO双向依赖，部分职责容易混响。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;胀血模型&quot;&gt;&lt;a href=&quot;#胀血模型&quot; class=&quot;headerlink&quot; title=&quot;胀血模型&quot;&gt;&lt;/a&gt;胀血模型&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;胀血模型就是把和业务逻辑不想关的其他应用逻辑（如授权、事务等）都放到领域模型中。我感觉胀血模型反而是另外一种的失血模型，因为服务层消失了，领域层干了服务层的事，到头来还是什么都没变。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;层次表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UI -&amp;gt; Control -&amp;gt; domain object &amp;lt;–&amp;gt; DAO&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;没有了服务层，领域对象包含所有业务逻辑，并双向依赖与持久化层。&lt;/li&gt;
&lt;li&gt;优点&lt;ul&gt;
&lt;li&gt;分层极其简单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点&lt;ul&gt;
&lt;li&gt;领域对象职责过多，挤压严重，极其不稳定，不易维护。&lt;/li&gt;
&lt;li&gt;控制层访问领域对象能够看到不必要的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;失血模型和胀血模型并不被提倡，主要原因：领域模型内聚职责过少，或者过多。&lt;br&gt;关于贫血模型和充血模型的选型，其实跟语言架构有关（Robin提出）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果使用Spring，必须贫血模型。&lt;/li&gt;
&lt;li&gt;如果使用RoR，直接充血模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/always_my_fault/article/details/2063612&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/always_my_fault/article/details/2063612&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.oschina.net/question/54100_10400&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.oschina.net/question/54100_10400&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.360doc.com/content/12/0423/03/9318309_205785083.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.360doc.com/content/12/0423/03/9318309_205785083.shtml&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;大多数情况下，我忍不住赋予Model行为，我并不知道它是否合理，了解一下领域模型中的贫血模型和充血模型，无意中发现还有胀血模型和失血模型。 如下是自己（cmp-cc）的理解：&lt;/p&gt;
&lt;h2 id=&quot;模型-（Model）&quot;&gt;&lt;a href=&quot;#模型-（Model）&quot; cla
    
    </summary>
    
      <category term="架构设计" scheme="http://cmp-cc.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="DDD (领域驱动设计)" scheme="http://cmp-cc.github.io/tags/DDD-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Java" scheme="http://cmp-cc.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Maven 服务器插件Jetty</title>
    <link href="http://cmp-cc.github.io/2013/10/16/Maven%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8F%92%E4%BB%B6Jetty/"/>
    <id>http://cmp-cc.github.io/2013/10/16/Maven 服务器插件Jetty/</id>
    <published>2013-10-16T00:54:00.000Z</published>
    <updated>2016-04-07T09:38:42.001Z</updated>
    
    <content type="html">&lt;p&gt;一个常规的Java Web 你需要部署到Tomcat中，使用Maven构建Web项目使用Jetty 容器，使运行Java Web项目更加方便。&lt;/p&gt;
&lt;h2 id=&quot;Jetty-完整性配置&quot;&gt;&lt;a href=&quot;#Jetty-完整性配置&quot; class=&quot;headerlink&quot; title=&quot;Jetty 完整性配置&quot;&gt;&lt;/a&gt;Jetty 完整性配置&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;webapp.port&amp;gt;8083&amp;lt;/webapp.port&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;webapp.stopPort&amp;gt;9090&amp;lt;/webapp.stopPort&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;webapp.path&amp;gt;/&amp;lt;/webapp.path&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;jetty-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;version&amp;gt;8.1.13.v20130916&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;configuration&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;webAppConfig&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;contextPath&amp;gt;$&amp;#123;webapp.path&amp;#125;&amp;lt;/contextPath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;defaultsDescriptor&amp;gt;webdefault.xml&amp;lt;/defaultsDescriptor&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/webAppConfig&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;connectors&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;connector implementation=&amp;quot;org.eclipse.jetty.server.nio.SelectChannelConnector&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;port&amp;gt;$&amp;#123;webapp.port&amp;#125;&amp;lt;/port&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;maxIdleTime&amp;gt;60000&amp;lt;/maxIdleTime&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/connector&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/connectors&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;reload&amp;gt;automatic&amp;lt;/reload&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;scanIntervalSeconds&amp;gt;0&amp;lt;/scanIntervalSeconds&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;!-- stopPort&amp;gt;$&amp;#123;webapp.stopPort&amp;#125;&amp;lt;/stopPort --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;systemProperties&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;systemProperty&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;org.mortbay.util.URI.charset&amp;lt;/name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;UTF-8&amp;lt;/value&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/systemProperty&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/systemProperties&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;jvmArgs&amp;gt;-Xmx512m -XX:PermSize=128m -XX:MaxPermSize=256m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            -Dfile.encoding=UTF-8&amp;lt;/jvmArgs&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;executions&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;execution&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;id&amp;gt;start-jetty&amp;lt;/id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;phase&amp;gt;pre-integration-test&amp;lt;/phase&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;goals&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;goal&amp;gt;run&amp;lt;/goal&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/goals&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;configuration&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;scanIntervalSeconds&amp;gt;0&amp;lt;/scanIntervalSeconds&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;daemon&amp;gt;true&amp;lt;/daemon&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/execution&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;execution&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;id&amp;gt;stop-jetty&amp;lt;/id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;phase&amp;gt;post-integration-test&amp;lt;/phase&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;goals&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;goal&amp;gt;stop&amp;lt;/goal&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/goals&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/execution&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/executions&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;运行命令 &lt;code&gt;jetty:run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;停止运行&lt;code&gt;jetty:stop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Jetty-可配置参数&quot;&gt;&lt;a href=&quot;#Jetty-可配置参数&quot; class=&quot;headerlink&quot; title=&quot;Jetty 可配置参数&quot;&gt;&lt;/a&gt;Jetty 可配置参数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;scanIntervalSeconds 表示扫时间，避免重复运行，它会自动检测是否修改项目文件&lt;/li&gt;
&lt;li&gt;jvmArgs JVM 堆栈大小&lt;/li&gt;
&lt;li&gt;port 端口号&lt;/li&gt;
&lt;li&gt;contextPath 项目路径&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一个常规的Java Web 你需要部署到Tomcat中，使用Maven构建Web项目使用Jetty 容器，使运行Java Web项目更加方便。&lt;/p&gt;
&lt;h2 id=&quot;Jetty-完整性配置&quot;&gt;&lt;a href=&quot;#Jetty-完整性配置&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="项目构建" scheme="http://cmp-cc.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="Maven" scheme="http://cmp-cc.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Java项目开发中的简称</title>
    <link href="http://cmp-cc.github.io/2013/08/12/Java%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%AE%80%E7%A7%B0/"/>
    <id>http://cmp-cc.github.io/2013/08/12/Java项目开发中的简称/</id>
    <published>2013-08-12T06:13:00.000Z</published>
    <updated>2016-04-08T11:54:28.037Z</updated>
    
    <content type="html">&lt;p&gt;Java项目开发中的简称，这些简称尤其应用到Java项目分层上。 传统的MVC，可以能只是三层架构。分为View、Control、Model。 有些简写的分层，在看别人代码的时候，可能一下反应不过来它是干什么的？ 这里仔细总结一下，我觉得非常有用，它使我们的代码结构更加清晰。&lt;/p&gt;
&lt;p&gt;大部分的缩写源于： 领域模型驱动（DDD）。&lt;/p&gt;
&lt;p&gt;大致如下缩写：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POJO (Plain Ordinary Java Object) 简单java对象&lt;/li&gt;
&lt;li&gt;DAO (Data Access Object) 数据访问对象&lt;/li&gt;
&lt;li&gt;DTO (Data Transfer Object) 数据传输对象&lt;/li&gt;
&lt;li&gt;VO (View Object) 值对象&lt;/li&gt;
&lt;li&gt;BO (Business Object) 业务对象&lt;/li&gt;
&lt;li&gt;PO (Persistant Object) 持久化对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考了一些文章，加上自己的理解&lt;/p&gt;
&lt;p&gt;首先要理解什么是JavaBean 、Model、Entity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaBean&lt;br&gt;&lt;strong&gt;JavaBean是一种规范，也即包含一组set和get方法的Java对象。Model、Entity、POJO、DTO、BO都属于JavaBean，因为他们符合这种规范。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;JavaBean分为业务Bean和数据Bean。数据Bean其实就Entity(实体对象)，业务Bean 就是（BO 业务对象）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Model&lt;br&gt;&lt;strong&gt;Model是MVC概念之一。也就是Model层用于存储实体对象（Entity）。Model通常 等价于Entity 用DAO层持久化对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Entity&lt;br&gt;&lt;strong&gt;Entity 为实体对象。你把它就做POJO、Model、JavaBean，也没人敢说你一定错误。他主要作用为数据（数据库数据）做持久化。 一旦将数据库中的一条数据存储Entity中，你把它叫做PO对象，也是对的。他只是 领域模型驱动中的概念之一&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;简单java对象-POJO&quot;&gt;&lt;a href=&quot;#简单java对象-POJO&quot; class=&quot;headerlink&quot; title=&quot;简单java对象 (POJO)&quot;&gt;&lt;/a&gt;简单java对象 (POJO)&lt;/h2&gt;&lt;p&gt;普通的Java对象，对于属性一般实现了JavaBean的标准，另外还可以包含一些简单的业务逻辑(方法)。&lt;/p&gt;
&lt;p&gt;一个POJO持久化以后就是PO&lt;br&gt;直接用它传递、传递过程中就是DTO&lt;br&gt;直接用来对应表示层就是VO&lt;/p&gt;
&lt;h2 id=&quot;数据访问对象-DAO&quot;&gt;&lt;a href=&quot;#数据访问对象-DAO&quot; class=&quot;headerlink&quot; title=&quot;数据访问对象 (DAO)&quot;&gt;&lt;/a&gt;数据访问对象 (DAO)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;DAO 数据访问对象，主要用于封装数据库的访问，通过它可以把POJO持久化为PO，用PO组装出来VO、DTO。&lt;/li&gt;
&lt;li&gt;我们还会把DAO叫做持久化层。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;数据传输对象-DTO&quot;&gt;&lt;a href=&quot;#数据传输对象-DTO&quot; class=&quot;headerlink&quot; title=&quot;数据传输对象 (DTO)&quot;&gt;&lt;/a&gt;数据传输对象 (DTO)&lt;/h2&gt;&lt;p&gt;Data Transfer Object数据传输对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DTO的概念是J2EE提出，主要用于分布式应用，用于服务之间的数据传输。&lt;/li&gt;
&lt;li&gt;分布式应用（JSONP、RCP、RMI等 远程方法或过程调用）之间的数据传输对象使用DTO。&lt;/li&gt;
&lt;li&gt;单系统中用于展示层与服务层之间的数据传输&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;值对象-VO&quot;&gt;&lt;a href=&quot;#值对象-VO&quot; class=&quot;headerlink&quot; title=&quot;值对象 (VO)&quot;&gt;&lt;/a&gt;值对象 (VO)&lt;/h2&gt;&lt;p&gt;ViewObject表现层对象 （展示层）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要对应界面显示的数据值对象。它包含了界面（Web、Mobile、PC）所请求的数据信息。&lt;/li&gt;
&lt;li&gt;VO的数据值可以是一个或多个Model的子集或交集，主要目的构成响应（Response）所要展示的内容信息。&lt;/li&gt;
&lt;li&gt;VO值对象会转换为JSON、XML、HTML等格式返回给请求者。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;业务对象-BO&quot;&gt;&lt;a href=&quot;#业务对象-BO&quot; class=&quot;headerlink&quot; title=&quot;业务对象 (BO)&quot;&gt;&lt;/a&gt;业务对象 (BO)&lt;/h2&gt;&lt;p&gt;business object业务对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。&lt;br&gt;eg:&lt;br&gt;比如一个简历，有教育经历、工作经历、社会关系等等。&lt;br&gt;我们可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。&lt;br&gt;建立一个对应简历的BO对象处理简历，每个BO包含这些PO。&lt;br&gt;这样处理业务逻辑时，我们就可以针对BO去处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;持久化对象-PO&quot;&gt;&lt;a href=&quot;#持久化对象-PO&quot; class=&quot;headerlink&quot; title=&quot;持久化对象 (PO)&quot;&gt;&lt;/a&gt;持久化对象 (PO)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;最形象的理解就是一个PO就是数据库中的一条记录。 （好处是可以把一条记录作为一个对象处理，可以方便的转为其它对象。）&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/2013/08/12/Java项目开发中的简称/2013-02-12-java.png&quot; alt=&quot;整体的结构图&quot; title=&quot;整体的结构图&quot;&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;领域模型可以使得责任更加明确。&lt;/li&gt;
&lt;li&gt;有时候避免过度设计&lt;br&gt;不要陷入过度设计，大可不必为了设计而设计一定要在代码中区分各个对象,一句话技术是为应用服务的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.blogjava.net/vip01/archive/2007/01/08/92430.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.blogjava.net/vip01/archive/2007/01/08/92430.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://b-l-east.iteye.com/blog/1142800&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://b-l-east.iteye.com/blog/1142800&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.blogjava.net/johnnylzb/archive/2010/05/27/321968.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.blogjava.net/johnnylzb/archive/2010/05/27/321968.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Java项目开发中的简称，这些简称尤其应用到Java项目分层上。 传统的MVC，可以能只是三层架构。分为View、Control、Model。 有些简写的分层，在看别人代码的时候，可能一下反应不过来它是干什么的？ 这里仔细总结一下，我觉得非常有用，它使我们的代码结构更加清晰
    
    </summary>
    
      <category term="架构设计" scheme="http://cmp-cc.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="DDD (领域驱动设计)" scheme="http://cmp-cc.github.io/tags/DDD-%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Java" scheme="http://cmp-cc.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
